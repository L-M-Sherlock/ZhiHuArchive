{
  "answer_type": "normal",
  "author": {
    "avatar_url": "https://picx.zhimg.com/v2-41f893b0cd84fb6a8c8f6d1bd29c9554_l.jpg?source=2c26e567",
    "avatar_url_template": "https://picx.zhimg.com/v2-41f893b0cd84fb6a8c8f6d1bd29c9554.jpg?source=2c26e567",
    "badge": [
      {
        "description": "信息技术行业 算法工程师",
        "topics": [],
        "type": "identity"
      }
    ],
    "badge_v2": {
      "detail_badges": [
        {
          "description": "知势榜教育校园领域影响力榜答主",
          "detail_type": "super_activity",
          "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
          "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
          "sources": [
            {
              "avatar_path": "",
              "avatar_url": "",
              "description": "",
              "id": "27",
              "name": "知势榜8月",
              "priority": 27,
              "token": "",
              "type": "content_potential_category",
              "url": ""
            }
          ],
          "title": "社区成就",
          "type": "reward",
          "url": ""
        },
        {
          "description": "信息技术行业 算法工程师",
          "detail_type": "identity_people",
          "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
          "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
          "sources": [],
          "title": "已认证的个人",
          "type": "identity",
          "url": "https://zhuanlan.zhihu.com/p/96956163"
        }
      ],
      "icon": "https://picx.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c",
      "merged_badges": [
        {
          "description": "知势榜教育校园领域影响力榜答主",
          "detail_type": "best",
          "icon": "",
          "night_icon": "",
          "sources": [],
          "title": "社区成就",
          "type": "best",
          "url": ""
        },
        {
          "description": "信息技术行业 算法工程师",
          "detail_type": "identity",
          "icon": "",
          "night_icon": "",
          "sources": [],
          "title": "认证",
          "type": "identity",
          "url": "https://zhuanlan.zhihu.com/p/96956163"
        }
      ],
      "night_icon": "https://picx.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c",
      "title": "知势榜教育校园领域影响力榜答主"
    },
    "gender": 1,
    "headline": "学校≠教育≠技能；文凭溢价=80%信号传递+20%人力资本",
    "id": "4c592f496dc33822b560b382907ff1d0",
    "is_advertiser": false,
    "is_org": false,
    "is_privacy": false,
    "name": "Thoughts Memo",
    "type": "people",
    "url": "https://api.zhihu.com/people/4c592f496dc33822b560b382907ff1d0",
    "url_token": "L.M.Sherlock",
    "user_type": "people"
  },
  "biz_ext": {},
  "comment_count": 17,
  "content": "<p data-pid=\"8YLYs8mb\"><a href=\"https://link.zhihu.com/?target=https%3A//github.com/burn-rs/burn\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">burn-rs</a>，一个深度学习框架，未来 FSRS 能不能在手机端跑，就看它了。</p><p data-pid=\"Ks4a0PBb\">对我这个算法工程师来说，这个库比较能解决的痛点包括：</p><ol><li data-pid=\"xmKxOpQV\">不依赖 torch/tensorflow，编译出来体积很小，可以在客户端进行参数训练，纯本地化</li><li data-pid=\"MkoFXH1d\">能自己写 forward，而不是几个网络层搭积木，比较自由，比如下面就是我重写的 FSRS：</li></ol><div class=\"highlight\"><pre><code class=\"language-rust\"><span class=\"cp\">#[derive(Module, Debug)]</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Model</span><span class=\"o\">&lt;</span><span class=\"n\">B</span>: <span class=\"nc\">Backend</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">w</span>: <span class=\"nc\">Param</span><span class=\"o\">&lt;</span><span class=\"n\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">B</span>: <span class=\"nc\">Backend</span><span class=\"o\">&lt;</span><span class=\"n\">FloatElem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Model</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"n\">w</span>: <span class=\"nc\">Param</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">Tensor</span>::<span class=\"n\">from_floats</span><span class=\"p\">([</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"mf\">0.4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">5.8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// initial stability\n</span><span class=\"c1\"></span><span class=\"w\">                </span><span class=\"mf\">4.93</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.94</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.86</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.01</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// difficulty\n</span><span class=\"c1\"></span><span class=\"w\">                </span><span class=\"mf\">1.49</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.94</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// success\n</span><span class=\"c1\"></span><span class=\"w\">                </span><span class=\"mf\">2.18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.34</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.26</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// failure\n</span><span class=\"c1\"></span><span class=\"w\">                </span><span class=\"mf\">0.29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.61</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// hard penalty, easy bonus\n</span><span class=\"c1\"></span><span class=\"w\">            </span><span class=\"p\">])),</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">w</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">power_forgetting_curve</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">t</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">retrievability</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">powf</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">retrievability</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">stability_after_success</span><span class=\"p\">(</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">last_s</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">new_d</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">r</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">rating</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">batch_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rating</span><span class=\"p\">.</span><span class=\"n\">dims</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hard_penalty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Tensor</span>::<span class=\"n\">ones</span><span class=\"p\">([</span><span class=\"n\">batch_size</span><span class=\"p\">])</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">mask_where</span><span class=\"p\">(</span><span class=\"n\">rating</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">equal_elem</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"mi\">15</span><span class=\"p\">..</span><span class=\"mi\">16</span><span class=\"p\">]));</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">easy_bonus</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Tensor</span>::<span class=\"n\">ones</span><span class=\"p\">([</span><span class=\"n\">batch_size</span><span class=\"p\">])</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">mask_where</span><span class=\"p\">(</span><span class=\"n\">rating</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">equal_elem</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"mi\">16</span><span class=\"p\">..</span><span class=\"mi\">17</span><span class=\"p\">]));</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">last_s</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"mi\">8</span><span class=\"p\">..</span><span class=\"mi\">9</span><span class=\"p\">]).</span><span class=\"n\">exp</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">new_d</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"mi\">9</span><span class=\"p\">..</span><span class=\"mi\">10</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">last_s</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">()).</span><span class=\"n\">exp</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(((</span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">..</span><span class=\"mi\">11</span><span class=\"p\">])).</span><span class=\"n\">exp</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">hard_penalty</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">easy_bonus</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">new_s</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">stability_after_failure</span><span class=\"p\">(</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">last_s</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">new_d</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">r</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"mi\">11</span><span class=\"p\">..</span><span class=\"mi\">12</span><span class=\"p\">])</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"mi\">12</span><span class=\"p\">..</span><span class=\"mi\">13</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">new_d</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">()).</span><span class=\"n\">exp</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"mi\">13</span><span class=\"p\">..</span><span class=\"mi\">14</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">last_s</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">log</span><span class=\"p\">()).</span><span class=\"n\">exp</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"mi\">14</span><span class=\"p\">..</span><span class=\"mi\">15</span><span class=\"p\">])).</span><span class=\"n\">exp</span><span class=\"p\">();</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">new_s</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">step</span><span class=\"p\">(</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">i</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">delta_t</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">rating</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">stability</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">difficulty</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">().</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rating</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">int</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">..</span><span class=\"mi\">5</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">..</span><span class=\"mi\">6</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rating</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">new_s</span><span class=\"p\">.</span><span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">36500.0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">new_d</span><span class=\"p\">.</span><span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">10.0</span><span class=\"p\">))</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">power_forgetting_curve</span><span class=\"p\">(</span><span class=\"n\">delta_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stability</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"c1\">// dbg!(&amp;r);\n</span><span class=\"c1\"></span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">difficulty</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"mi\">6</span><span class=\"p\">..</span><span class=\"mi\">7</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rating</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new_d</span><span class=\"p\">.</span><span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">10.0</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"c1\">// dbg!(&amp;new_d);\n</span><span class=\"c1\"></span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s_recall</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">stability_after_success</span><span class=\"p\">(</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"n\">stability</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"n\">new_d</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\">\n</span><span class=\"w\">                </span><span class=\"n\">rating</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s_forget</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">stability_after_failure</span><span class=\"p\">(</span><span class=\"n\">stability</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new_d</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s_recall</span><span class=\"p\">.</span><span class=\"n\">mask_where</span><span class=\"p\">(</span><span class=\"n\">rating</span><span class=\"p\">.</span><span class=\"n\">equal_elem</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">s_forget</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">new_s</span><span class=\"p\">.</span><span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">36500.0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">new_d</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">delta_ts</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"n\">ratings</span>: <span class=\"nc\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Float</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Tensor</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">seq_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">batch_size</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">delta_ts</span><span class=\"p\">.</span><span class=\"n\">dims</span><span class=\"p\">();</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stability</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Tensor</span>::<span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"n\">batch_size</span><span class=\"p\">]);</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">difficulty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Tensor</span>::<span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"n\">batch_size</span><span class=\"p\">]);</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">seq_len</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">delta_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">delta_ts</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"p\">..</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]).</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rating</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ratings</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">slice</span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"p\">..</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]).</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"c1\">// dbg!(&amp;delta_t);\n</span><span class=\"c1\"></span><span class=\"w\">            </span><span class=\"c1\">// dbg!(&amp;rating);\n</span><span class=\"c1\"></span><span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">stability</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">difficulty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">step</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">delta_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rating</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stability</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">difficulty</span><span class=\"p\">);</span><span class=\"w\">\n</span><span class=\"w\">            </span><span class=\"c1\">// dbg!(&amp;stability);\n</span><span class=\"c1\"></span><span class=\"w\">            </span><span class=\"c1\">// dbg!(&amp;difficulty);\n</span><span class=\"c1\"></span><span class=\"w\">            </span><span class=\"c1\">// dbg!()\n</span><span class=\"c1\"></span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">stability</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">difficulty</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div><p data-pid=\"yxkvtADg\">不过这个库还是有几个问题：</p><ol><li data-pid=\"7ZC5phNK\">训练过程有点过度封装了，想要自己写个迭代的 loop 很难</li><li data-pid=\"pwwgbOgW\">不支持训练过程中修改参数，我想做个参数剪裁，目前还没找到方法</li></ol><p data-pid=\"U1fml772\">反正边写边踩坑，边给社区提 issue，希望今年能把这个项目写完吧。</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/open-spaced-repetition/fsrs-optimizer-burn\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">open-spaced-repetition/fsrs-optimizer-burn: Rust-based Optimizer for FSRS (github.com)</a><p data-pid=\"fbxTf3tH\">也欢迎 Rust 大佬前来助阵！</p><p data-pid=\"fye122R3\">更多有关 FSRS 的介绍，请见：</p><a href=\"https://zhuanlan.zhihu.com/p/577383961\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-337e676d732039a25471c1057c54bfa3_180x120.jpg\" data-image-width=\"2700\" data-image-height=\"1480\" class=\"internal\">叶峻峣：KDD&#39;22 | 墨墨背单词：基于时序模型与最优控制的记忆算法 [AI+教育]</a><a href=\"https://zhuanlan.zhihu.com/p/649655080\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-9c14ae073ac7ff2f3d208d31b0ed10b2_180x120.jpg\" data-image-width=\"2638\" data-image-height=\"1304\" class=\"internal\">叶峻峣：解释 FSRS（上篇）：算法描述与运作原理</a><a href=\"https://zhuanlan.zhihu.com/p/649701172\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-e9f56ba072166b28b7c371e246a79fc5_180x120.jpg\" data-image-width=\"2638\" data-image-height=\"1304\" class=\"internal\">叶峻峣：解释 FSRS（下篇）：准确度</a><p></p>",
  "content_need_truncated": false,
  "created_time": 1692357204,
  "excerpt": "burn-rs ，一个深度学习框架，未来 FSRS 能不能在手机端跑，就看它了。对我这个算法工程师来说，这个库比较能解决的痛点包括： 不依赖 torch/tensorflow，编译出来体积很小，可以在客户端进行参数训练，纯本地化能自己写 forward，而不是几个网络层搭积木，比较自由，比如下面就是我重写的 FSRS：#[derive(Module, Debug)] pub struct Model&lt;B: Backend&gt; { pub w: Param&lt;Tensor&lt;B, 1&gt;&gt;, } impl&lt;B: Backend&lt;FloatElem = f32&gt;&gt; Mode…",
  "id": 3171853749,
  "is_jump_native": false,
  "link_card_info": {
    "https://zhuanlan.zhihu.com/p/577383961": "{\"card_type\":\"card_1\",\"display\":{\"title\":\"KDD'22 | 墨墨背单词：基于时序模型与最优控制的记忆算法 [AI+教育]\",\"card_open_url\":\"https://zhuanlan.zhihu.com/p/577383961\",\"desc\":\"476 赞同 · 91 评论 \\u003ca class=\\\"tag type_a\\\"\\u003e文章\\u003c/a\\u003e\",\"content\":\"\\u003ca class=\\\"text normal/bold\\\" data-color=\\\"#444444\\\" data-night-color=\\\"#D3D3D3\\\"\\u003eThoughts Memo:\\u003c/a\\u003e 大家好，我是叶峻峣，墨墨科技的记忆算法工程师。前三篇文章我分别介绍了我的科研经历 [1]、算法教程[2]和研究资源[3]。今天分享一下记忆算法论文 A Stochastic Shortest Path Algorithm for Optimizing Spaced Repetition Scheduling 的详细介绍，该论文由我和哈工深的苏敬勇老师、墨墨背单词的曹译珑博士在 KDD 2022 上发表，研究了如何在背单词场景下对用户复习规划进行优化的问题。与以往的同类工作不同的是，本文构建了包含…\",\"image\":{\"image_url\":\"https://pica.zhimg.com/v2-337e676d732039a25471c1057c54bfa3_r.jpg?source=172ae18b\",\"ratio\":1,\"is_video\":false},\"bg_type\":\"dark\"},\"source\":{\"content_type\":\"ARTICLE\",\"content_id\":\"577383961\"},\"za_data\":{\"attach_info\":\"\"}}",
    "https://zhuanlan.zhihu.com/p/649655080": "{\"card_type\":\"card_1\",\"display\":{\"title\":\"解释 FSRS（上篇）：算法描述与运作原理\",\"card_open_url\":\"https://zhuanlan.zhihu.com/p/649655080\",\"desc\":\"87 赞同 · 42 评论 \\u003ca class=\\\"tag type_a\\\"\\u003e文章\\u003c/a\\u003e\",\"content\":\"\\u003ca class=\\\"text normal/bold\\\" data-color=\\\"#444444\\\" data-night-color=\\\"#D3D3D3\\\"\\u003eThoughts Memo:\\u003c/a\\u003e 如果你正在使用 Anki 但还没听说过 FSRS ，那我来简单地给你介绍一下：它是一个新的调度算法，比 Anki 的默认算法更加灵活、准确。最近，FSRS 的新版本已经发布，它比之前更加精确，因此我决定写两篇关于 FSRS 的文章。注：我并不是 FSRS 的开发者。我只是一个在 GitHub 上经常提交错误报告和功能请求的普通人。但我对 FSRS 非常了解，特别是 v4 版本的很多改动，都是我一手提议的。（校对：这人提了几十个 issue，累死我了）等级…\",\"image\":{\"image_url\":\"https://picx.zhimg.com/v2-9c14ae073ac7ff2f3d208d31b0ed10b2_r.jpg?source=172ae18b\",\"ratio\":1,\"is_video\":false},\"bg_type\":\"dark\"},\"source\":{\"content_type\":\"ARTICLE\",\"content_id\":\"649655080\"},\"za_data\":{\"attach_info\":\"\"}}",
    "https://zhuanlan.zhihu.com/p/649701172": "{\"card_type\":\"card_1\",\"display\":{\"title\":\"解释 FSRS（下篇）：准确度\",\"card_open_url\":\"https://zhuanlan.zhihu.com/p/649701172\",\"desc\":\"56 赞同 · 49 评论 \\u003ca class=\\\"tag type_a\\\"\\u003e文章\\u003c/a\\u003e\",\"content\":\"\\u003ca class=\\\"text normal/bold\\\" data-color=\\\"#444444\\\" data-night-color=\\\"#D3D3D3\\\"\\u003eThoughts Memo:\\u003c/a\\u003e 如果你还没有读过上篇，我建议你先读一读： [文章: 解释 FSRS（上篇）：算法描述与运作原理] 注：我并不是 FSRS 的开发者。我只是一个在 GitHub 上经常提交错误报告和功能请求的普通人。但我对 FSRS 非常了解，特别是新版本的很多改动，都是我一手提议的。（校对：这人提了几十个 issue，累死我了）很多人都对 FSRS 的复杂性抱有疑虑，质疑它是否真的能比 Anki 的简易算法更准确。许多人觉得 Anki 设置的复习间隔已经够好了（但这…\",\"image\":{\"image_url\":\"https://pica.zhimg.com/v2-e9f56ba072166b28b7c371e246a79fc5_r.jpg?source=172ae18b\",\"ratio\":1,\"is_video\":false},\"bg_type\":\"dark\"},\"source\":{\"content_type\":\"ARTICLE\",\"content_id\":\"649701172\"},\"za_data\":{\"attach_info\":\"\"}}"
  },
  "question": {
    "created": 1685778685,
    "detail": "<p>相似问题：<a href=\"https://www.zhihu.com/question/24590883\" class=\"internal\">哪些 Python 库让你相见恨晚？</a></p>",
    "id": 604594191,
    "question_type": "normal",
    "relationship": {},
    "title": "哪些 Rust 库让你相见恨晚？",
    "type": "question",
    "updated_time": 1685778685,
    "url": "https://api.zhihu.com/questions/604594191"
  },
  "relationship": {
    "upvoted_followees": []
  },
  "type": "answer",
  "voteup_count": 107
}