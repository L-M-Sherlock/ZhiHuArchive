{
  "answer_type": "normal",
  "author": {
    "avatar_url": "https://picx.zhimg.com/v2-f958f2b875b0cf4d7ee853e4446ba2d1_l.jpg?source=2c26e567",
    "avatar_url_template": "https://picx.zhimg.com/v2-f958f2b875b0cf4d7ee853e4446ba2d1.jpg?source=2c26e567",
    "badge": [
      {
        "description": "信息技术行业 算法工程师",
        "topics": [],
        "type": "identity"
      }
    ],
    "badge_v2": {
      "detail_badges": [
        {
          "description": "知势榜教育校园领域影响力榜答主",
          "detail_type": "super_activity",
          "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
          "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
          "sources": [
            {
              "avatar_path": "",
              "avatar_url": "",
              "description": "",
              "id": "27",
              "name": "知势榜8月",
              "priority": 27,
              "token": "",
              "type": "content_potential_category",
              "url": ""
            }
          ],
          "title": "社区成就",
          "type": "reward",
          "url": ""
        },
        {
          "description": "信息技术行业 算法工程师",
          "detail_type": "identity_people",
          "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
          "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
          "sources": [],
          "title": "已认证的个人",
          "type": "identity",
          "url": "https://zhuanlan.zhihu.com/p/96956163"
        }
      ],
      "icon": "https://picx.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c",
      "merged_badges": [
        {
          "description": "知势榜教育校园领域影响力榜答主",
          "detail_type": "best",
          "icon": "",
          "night_icon": "",
          "sources": [],
          "title": "社区成就",
          "type": "best",
          "url": ""
        },
        {
          "description": "信息技术行业 算法工程师",
          "detail_type": "identity",
          "icon": "",
          "night_icon": "",
          "sources": [],
          "title": "认证",
          "type": "identity",
          "url": "https://zhuanlan.zhihu.com/p/96956163"
        }
      ],
      "night_icon": "https://pic1.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c",
      "title": "知势榜教育校园领域影响力榜答主"
    },
    "gender": 1,
    "headline": "在Anki制作2.9万张卡片，复习33万次。Anki高考践行者、推广者。",
    "id": "4c592f496dc33822b560b382907ff1d0",
    "is_advertiser": false,
    "is_org": false,
    "is_privacy": false,
    "name": "Thoughts Memo",
    "type": "people",
    "url": "https://api.zhihu.com/people/4c592f496dc33822b560b382907ff1d0",
    "url_token": "L.M.Sherlock",
    "user_type": "people"
  },
  "biz_ext": {},
  "comment_count": 2,
  "content": "<p data-pid=\"ZBPIhlUC\">就以我在上学期的汇编语言课实战牌组为例吧！（原文《<a href=\"https://zhuanlan.zhihu.com/p/94724167\" class=\"internal\">【Anki 牌组+Markdown笔记分享】汇编语言</a>》）</p><p data-pid=\"EYKtR5aS\">Anki 牌组分享地址：</p><a href=\"https://link.zhihu.com/?target=https%3A//ankiweb.net/shared/info/1975809327\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">ankiweb.net/shared/info</span><span class=\"invisible\">/1975809327</span><span class=\"ellipsis\"></span></a><p data-pid=\"3uBtB1v8\">预览：</p><figure data-size=\"normal\"><noscript><img src=\"https://picx.zhimg.com/50/v2-6f23c0288cd2117705c22889653301f1_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1156\" data-rawheight=\"776\" data-original-token=\"v2-6f23c0288cd2117705c22889653301f1\" class=\"origin_image zh-lightbox-thumb\" width=\"1156\" data-original=\"https://pic1.zhimg.com/v2-6f23c0288cd2117705c22889653301f1_r.jpg?source=2c26e567\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1156&#39; height=&#39;776&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1156\" data-rawheight=\"776\" data-original-token=\"v2-6f23c0288cd2117705c22889653301f1\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1156\" data-original=\"https://pic1.zhimg.com/v2-6f23c0288cd2117705c22889653301f1_r.jpg?source=2c26e567\" data-actualsrc=\"https://picx.zhimg.com/50/v2-6f23c0288cd2117705c22889653301f1_720w.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pica.zhimg.com/50/v2-935ca98413fb97e280186119c821aa06_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1156\" data-rawheight=\"776\" data-original-token=\"v2-935ca98413fb97e280186119c821aa06\" class=\"origin_image zh-lightbox-thumb\" width=\"1156\" data-original=\"https://picx.zhimg.com/v2-935ca98413fb97e280186119c821aa06_r.jpg?source=2c26e567\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1156&#39; height=&#39;776&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1156\" data-rawheight=\"776\" data-original-token=\"v2-935ca98413fb97e280186119c821aa06\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1156\" data-original=\"https://picx.zhimg.com/v2-935ca98413fb97e280186119c821aa06_r.jpg?source=2c26e567\" data-actualsrc=\"https://pica.zhimg.com/50/v2-935ca98413fb97e280186119c821aa06_720w.jpg?source=2c26e567\"/></figure><p data-pid=\"6m3LccUU\">我的成绩：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/50/v2-c09a4eaec05e9de641024c1b11501567_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1629\" data-rawheight=\"835\" data-original-token=\"v2-c09a4eaec05e9de641024c1b11501567\" class=\"origin_image zh-lightbox-thumb\" width=\"1629\" data-original=\"https://picx.zhimg.com/v2-c09a4eaec05e9de641024c1b11501567_r.jpg?source=2c26e567\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1629&#39; height=&#39;835&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1629\" data-rawheight=\"835\" data-original-token=\"v2-c09a4eaec05e9de641024c1b11501567\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1629\" data-original=\"https://picx.zhimg.com/v2-c09a4eaec05e9de641024c1b11501567_r.jpg?source=2c26e567\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-c09a4eaec05e9de641024c1b11501567_720w.jpg?source=2c26e567\"/></figure><p data-pid=\"ZOL92lyN\">以下是我用 Markdown 做的笔记：</p><h2>第一章 基础知识</h2><h2>1.1 进位计数制与不同基数的数之间的转换</h2><h3>1.1.1 二进制数</h3><p data-pid=\"jcug5WfP\">二进制的基数为 2，即数码的个数为 2 ，只有 0 和 1，并遵循逢二进一的规则。</p><p data-pid=\"n9A9tBO2\">十进制数 D，二进制数 B，八进制 O，十六进制 H。</p><h3>1.1.2 二进制数和十进制之间的转换</h3><p data-pid=\"czJuG-w8\">二进制转十进制：各位二进制数码乘以其对应的权之和</p><p data-pid=\"3Ecdf1r1\">十进制转二进制：整数部分连除 2，得到的余数是从低位到高位的二进制数码，小数部分连乘 2，每次整数位归零，得到的整数位是从高位到低位的二进制数码。</p><h3>1.1.3 十六进制数及其与二进制、十进制数之间的转换</h3><p data-pid=\"Lzocb9oh\">十六进制的数码：0123456789ABCDEF</p><p data-pid=\"2yk8qo43\">十六进制和二进制转换：二进制从低位到高位每 4 位转换为一个十六进制数</p><p data-pid=\"QlHqoloh\">十进制转十六进制：连除 16 取余，连乘 16 取整。</p><h2>1.2 二进制数和十六进制数运算</h2><p data-pid=\"PCx_h9Qs\">练</p><h2>1.3 计算机中数和字符的表示</h2><h3>1.3.1 数的补码表示</h3><p data-pid=\"KfoydTb7\">最高位表示正负</p><p data-pid=\"4y7NMW0Z\">负数补码为绝对值补码取反后 +1</p><p data-pid=\"SL9u6Ac6\">求补运算：按位取反 +1</p><h2>1.4 几种基本的逻辑运算</h2><p data-pid=\"r2XukQU0\">与 AND 有 0 取 0，全 1 取 1</p><p data-pid=\"YzJSj-QS\">或 OR 有 1 取 1，全 0 取 0</p><p data-pid=\"m0ODf6fq\">非 NOT 0 转 1，1 转 0</p><p data-pid=\"kYbD12L4\">异或 XOR 相同取 0，相异取 1</p><h2>第二章 IMB PC 计算机组织</h2><h2>2.1 计算机系统概述</h2><p data-pid=\"kaoR3L50\">计算机结构：中央处理机CPU 存储器M 输入/输出子系统I/O</p><p data-pid=\"JzY105eU\">中央处理器包括运算器和控制器</p><p data-pid=\"Pm6tV7Gc\">系统总线：作用：连接 CPU、存储器、I/O 设备；组成成分：数据线、地址线、控制线</p><h2>2.2 存储器</h2><p data-pid=\"HMLH2PWo\">IBM PC 的字长为 16 位</p><p data-pid=\"ngteM5zq\">存储器以字节为单位存储信息</p><p data-pid=\"IgHouat9\">一个字节为 8 位</p><p data-pid=\"lZ-qhDsg\">每个字节单元有一个存储器地址（无符号整数）</p><p data-pid=\"KGcxwdsy\">一个字存入存储器要占有相继的 2 个字节</p><p data-pid=\"czIww3iP\">存放一个字时，低位字节存入低地址，高位字节存入高地址</p><p data-pid=\"fkapf9pr\">以低位字节的地址表示字的地址</p><p data-pid=\"IUekUsJ1\">如果 M 表示地址，则(M)表示该地址存放的内容</p><p data-pid=\"orUqa3mk\">在 1M 字节的存储器里，每一个存储单元都有一个唯一的 20 位地址</p><p data-pid=\"CMblUnFK\">段地址的低 4 位一定是 0（20 位中低 4 位为 0，所以可以用 16 位来存储）</p><p data-pid=\"0pUIdPRh\">每 16 个字节为一小段</p><p data-pid=\"sLtLU_NJ\">段起始地址必须从任一小段的首地址开始</p><p data-pid=\"HpyOXmOW\">物理地址 = 段地址（后补 4 位 0） + 偏移地址</p><p data-pid=\"4KNFAfgO\">同一个物理地址可以用不同的段地址和偏移地址组成</p><p data-pid=\"P5LwF7i7\">逻辑地址——段地址:偏移地址</p><p data-pid=\"SNEesYka\">段寄存器：代码段 CS、数据段 DS、堆栈段 SS、附加段 ES</p><h2>2.3 中央处理机</h2><p data-pid=\"agdbVP7O\">数据寄存器：</p><p data-pid=\"Hfd_uFrC\">AX 累加器，用于算术、逻辑运算以及与外设传送信息</p><p data-pid=\"ltZcA2s9\">BX  基址寄存器，常用于存放存储器地址</p><p data-pid=\"EYIA7DCk\">CX 计数器，一般作为循环或串操作等指令中的隐含计数器。在位操作中，当移多位时，要用 CL 来指明移位的位数；</p><p data-pid=\"HRG6mAOy\">DX 数据寄存器，常用来存放双字数据的高16位，在进行乘、除运算时，它可作为默认的操作数参与运算，亦可存放外设端口地址</p><p data-pid=\"sQOdeRha\">可以以字节（8 位）形式访问高位低位字节，即 AH、AL……</p><p data-pid=\"yEGUsTU3\">指针与变址寄存器：</p><p data-pid=\"z-_RwHqh\">SI 源变址寄存器：与 DS 联用可在数据段中寻址</p><p data-pid=\"JcjHElmS\">DI 目的变址寄存器：与 ES 联用可在附加段中寻址</p><p data-pid=\"FcFdiE8I\">SP 堆栈指针寄存器：用于指示栈顶的偏移地址</p><p data-pid=\"4vmkvHBZ\">BP 基址指针寄存器：可作为堆栈区的一个基地址以便访问堆栈中的其他信息</p><p data-pid=\"lIXRHlJL\">控制寄存器：</p><p data-pid=\"QOgXYF3e\">IP 指令指针寄存器：存放代码段中的偏移地址，CS:IP 确定下一条指令的物理地址</p><p data-pid=\"F4EFiDMu\">PSW 程序状态字寄存器</p><p data-pid=\"lhJuki6K\">条件码（状态标志）：</p><p data-pid=\"w1XVBi55\">OF 溢出标志：操作数超出机器表示范围时置 1</p><p data-pid=\"5_bVjl6n\">SF 符号标志：运算结果为负时为 1</p><p data-pid=\"A_oykMfr\">ZF 零标志：运算结果为 0 时置 1</p><p data-pid=\"p1EpOu5O\">CF 进位标志：最高有效位有进位时置 1</p><p data-pid=\"f8x63E2X\">AF 辅助进位标志：记录运算时第 3 位产生的进位值，有进位时置 1</p><p data-pid=\"rzOxnRXZ\">PF 奇偶标志：当结果操作数中 1 的个数为偶数时置 1</p><p data-pid=\"bs8JREPy\">控制标志：</p><p data-pid=\"BQQjA3wF\">DF 方向标志：=1 时，每次操作后使变址寄存器 SI 和 DI 减量</p><p data-pid=\"viOnvowi\">IF 中断标志：=1 时，允许中断</p><p data-pid=\"LZ7KnTBI\">TF 陷阱标志：=1 时，处理器单步执行指令</p><p data-pid=\"gpFxrOZg\">控制信息由系统程序或用户程序根据需要用指令设置</p><p data-pid=\"xArnaTEb\">条件码用于记录程序中运行结果的状态信息，由中央处理机根据计算结果自动设置</p><h2>2.4 外部设备</h2><p data-pid=\"eMglFVmz\">IBM PC 机的 I/O 地址端口范围为 0000~FFFFH</p><h2>作业：2.2、2.3、2.9</h2><h2>第三章 IBM PC 机的指令系统和寻址方式</h2><p data-pid=\"SfPED6zE\">汇编指令格式：</p><p data-pid=\"LJ9Mned5\">操作码 [操作数1 [,操作数2 [,操作数3]]] [;注释]</p><h2>3.1 IBM PC 机的寻址方式</h2><h3>3.1.1 与数据有关的寻址方式</h3><h3>3.1.1.1 立即寻址方式</h3><p data-pid=\"JAchmOts\">操作数直接存放在指令中，紧跟在操作码之后</p><p data-pid=\"7EHzGdew\">只能用于源操作数，不能用于目的操作数</p><p data-pid=\"G6EByg3l\">第一个操作数是目的操作数</p><h3>3.1.1.2 寄存器寻址方式</h3><p data-pid=\"6ikBULn_\">操作数在寄存器中，指令指定寄存器号</p><p data-pid=\"XNAZE2hM\">8 位寄存器：AH、AL等</p><p data-pid=\"XvQJEgu3\">16 位寄存器：AX、BX等</p><h3>3.1.1.3 直接寻址方式</h3><p data-pid=\"5P_kRZgm\">把操作数的偏移地址称为有效地址 EA</p><p data-pid=\"1Zrl3FTG\">在指令中给出偏移地址，用[]包括</p><p data-pid=\"63So6ohs\">默认段地址为 DS</p><h3>3.1.1.4 寄存器间接寻址方式</h3><p data-pid=\"28qARQvg\">操作数的有效地址在基址寄存器 BX、BP 或变址寄存器 SI、DI 中，而操作数则在存储器中</p><p data-pid=\"5JSXdK7w\">物理地址=段地址*16d+基址/变址</p><h3>3.1.1.5 寄存器相对寻址方式</h3><p data-pid=\"6CxBjMdh\">操作数的有效地址是一个基址或变址寄存器的内容和指令中指定的 8 位或 16 位位移量之和</p><p data-pid=\"RCFBuduB\">物理地址=段地址*16d+基址/变址+位移量</p><h3>3.1.1.6 基址变址寻址方式</h3><p data-pid=\"SnY5vr6N\">操作数的有效地址是基址寄存器和变址寄存器的内容之和</p><p data-pid=\"o3tMaSCG\">当基址寄存器为 BX 时，段寄存器默认 DS</p><p data-pid=\"fsb8X9zW\">当基址寄存器为 BP 时，段寄存器默认 SS</p><h3>3.1.1.7 相对基址变址寻址方式</h3><p data-pid=\"CcpUZY_U\">操作数的有效地址是基址寄存器和变址寄存器的内容和 8 位或 16 位位移量之和</p><p data-pid=\"Z3jdzk0N\">寄存器操作数地址只能由 BX、BP、SI、DI 给出</p><h3>3.1.2 与转移地址有关的寻址方式</h3><h3>3.1.2.1 段内直接寻址</h3><p data-pid=\"bCrixOJa\">转向的有效地址是当前 IP 寄存器的内容和指令中指定的 8 位或 16 位位移量之和。</p><p data-pid=\"NxGdsLKH\">可用于条件转移及无条件转移指令（JMP）</p><p data-pid=\"oEkI1fCA\">用于条件转移指令时，位移量只允许 8 位（短跳）</p><p data-pid=\"pW_QkpFh\">位移量为 16 位时，符号地址前加操作符 NEAR PTR</p><p data-pid=\"5CQNdsGN\">位移量为 8 位时，符号地址前加操作符 SHORT</p><h3>3.1.2.2 段内间接寻址</h3><p data-pid=\"v8E66-lh\">转向有效地址是一个寄存器或是一个存储器单元的内容。</p><p data-pid=\"2_eO_Mrp\">直接将求得的转移的有效地址送到 IP 寄存器</p><p data-pid=\"N7IwXdYx\">段内间接寻址转移的操作符：JMP    WORD PTR</p><h3>3.1.2.3 段间直接寻址</h3><p data-pid=\"C-gw-fC1\">指令中直接提供了转向段地址和偏移地址</p><p data-pid=\"-64Gv2Uh\">偏移地址取代 IP 寄存器的内容</p><p data-pid=\"a3vmlQIr\">段地址取得 CS 寄存器的内容</p><p data-pid=\"bZ4P-Ee5\">段间直接寻址转移的操作符 FAR PTR</p><p data-pid=\"u9mgcpOB\">格式：JMP FAR PTR NEXTROUTINT</p><h3>3.1.2.4 段间间接寻址</h3><p data-pid=\"_uyrX7Js\">用存储器中的两个相继字的内容来取代 IP 和 CS 寄存器中的内容</p><p data-pid=\"wutIazx2\">双字操作符 DWORD PTR</p><h2>3.2 IBM PC 机的机器语言指令概况</h2><h3>3.2.1 操作码的机器语言表示</h3><p data-pid=\"Rt_v8I5j\">一条指令可以由 1~7 个字节组成</p><p data-pid=\"ue12mje7\">指令的操作码通常用指令的第一个字节表示</p><h3>3.2.2 寻址方式的机器语言表示</h3><p data-pid=\"nUVKuq4Q\">操作数的寻址方式通常用机器指令的第二个字节。</p><h2>3.3 IBM PC 机的指令系统</h2><h3>3.3.1 数据传送指令</h3><p data-pid=\"iCMrmrro\">数据传送指令负责把数据、地址或立即数传送到寄存器或存储单元</p><h3>3.3.1.1 通用数据传送指令</h3><p data-pid=\"vANTBgwI\">MOV 传送</p><p data-pid=\"thF2r1UQ\">PUSH 进栈</p><p data-pid=\"O-FycD5k\">POP 出栈</p><p data-pid=\"nFrzu92q\">XCHG 交换</p><p data-pid=\"gQe5_S8-\">MOV DST,SRC；执行操作：(DST)←(SRC)</p><p data-pid=\"s1-Z-V6d\">MOV 指令的目的操作数不允许用立即数方式和 CS 寄存器</p><p data-pid=\"gKjjCfM7\">不允许用 MOV 指令在两个存储单元或两个段寄存器之间传送数据</p><p data-pid=\"xwpSnUGU\">PUSH    SRC；执行操作：(SP)←(SP)-2，((SP)+1,(SP))←(SRC)</p><p data-pid=\"SDTFDdPA\">POP DST；执行操作：(DST)←((SP)+1,(SP))，(SP)←(SP)+2</p><p data-pid=\"jDBvoQu_\">堆栈的存取必须以字为单位</p><p data-pid=\"3GBKi36r\">POP 指令不允许用 CS 寄存器</p><p data-pid=\"ubyRJAEE\">XCHG    OPR1，OPR2；执行操作：(OPR1)←→(OPR2)</p><p data-pid=\"3j0c7Glp\">XCHG 的两个操作数中必须有一个在寄存器中，不允许使用段寄存器</p><p data-pid=\"WVQs4ZK8\">PUSHA：16位通用寄存器依次进栈，次序为AX、CX、DX、BX，指令执行前的SP、BP、SI、DI。指令执行后(SP)-16→(SP)仍指向栈顶。 </p><p data-pid=\"xLSRTNuw\">POPA：16位通用寄存器依次出栈，次序为DI、SI、BP、SP，指令执行前的BX、DX、CX、AX。指令执行后(SP)+16→(SP) 仍指向栈顶</p><h3>3.3.1.2 累加器专用传送指令</h3><p data-pid=\"IIm72rBt\">IN 输入</p><p data-pid=\"PK8CtF3S\">OUT 输出</p><p data-pid=\"YZOwWywf\">XLAT 换码</p><p data-pid=\"0QyMY01v\">只限于使用 AX 或 AL 传送信息</p><p data-pid=\"6sUh2jRP\">IN  AL,PORT（字节）；(AL)←(PORT)</p><p data-pid=\"nXTEAohF\">IN  AX,PORT（字）；(AX)←(PORT+1,PORT)</p><p data-pid=\"bGrwXeDK\">IN  AL,DX（字节）；(AL)←((DX))</p><p data-pid=\"lZxXjWoM\">IN  AX,DX（字）；(AX)←((DX)+1,(DX))</p><p data-pid=\"ICHn5LFU\">OUT PORT,AL（字节）；(PORT)←(AL)</p><p data-pid=\"2EN6uSFf\">OUT PORT,AX（字）；(PORT+1,PORT)←(AX)</p><p data-pid=\"OvWVfXEG\">OUT DX,AL（字节）；((DX))←(AL)</p><p data-pid=\"8emTMZoT\">OUT DX,AX（字）；((DX)+1,(DX))←(AX)</p><p data-pid=\"Aum3EP40\">外部设备最多有2^16个I/O端口，端口号为0000～0FFFFH，其中前256个端口（00～0FFH）可以直接在指令中指定，这就是所谓的长格式</p><p data-pid=\"S3BkVW-A\">当端口号≥256时，只能使用短格式，此时必须先将端口号放到DX寄存器中（端口号为0000～0FFFFH），然后再用IN和OUT指令来传送信息。</p><p data-pid=\"kYlHHfSj\">XLAT    OPR；(AL)←((BX)+(AL))，将一种代码转换为另一种代码</p><p data-pid=\"LpEku6uQ\">使用前，应先建立一个字节表格，表格首地址的位移量提前存入 BX 寄存器，需要转换的代码应该相对于表格首地址的位移量也提前存放在 AL 寄存器中，表格内容则是所要换取的代码，指令执行后就可在 AL 中得到转换后的代码</p><h3>3.3.1.3 地址传送指令</h3><p data-pid=\"abK5zLSE\">LEA 有效地址送寄存器</p><p data-pid=\"uGhCOruV\">LDS 指针送寄存器和 DS</p><p data-pid=\"aBZk2DNO\">LES 指针送寄存器和 ES</p><p data-pid=\"iQ4rVkDb\">LEA REG,SRC；(REG)←SRC，把源操作数的有效地址送到指定寄存器</p><p data-pid=\"-HuosyD1\">LDS REG,SRC；(REG)←(SRC)，(DS)←(SRC+2)，把源操作数指定的 4 个相继字节送到指令指定的寄存器及 DS 寄存器中。</p><p data-pid=\"MQflZ3gs\">LES REG,SRC；(REG)←(SRC)，(ES)←(SRC+2)，把源操作数指定的 4 个相继字节送到指令指定的寄存器及 ES 寄存器中。</p><h3>3.3.1.4 标志寄存器传送指令</h3><p data-pid=\"9Eiu4C5V\">LAHF 标志位送 AH： (AH)←(FLAGS的低字节)</p><p data-pid=\"MYsMJPtW\">SAHF AH 送标志寄存器：(FLAGS的低字节)←(AH)</p><p data-pid=\"A3g9_mCm\">PUSHF 标志进栈：(SP)←(SP) - 2， ( (SP)+1,  (SP) )←(FLAGS)</p><p data-pid=\"HDvCQxEx\">POPF 标志出栈：(FLAGS)←((SP)+1,(SP))，(SP)←(SP) + 2</p><p data-pid=\"Bvtadxtr\">SAHF，POPF影响标志位</p><h3>3.3.1.5 类型转换指令</h3><p data-pid=\"Ah528a6R\">CBW：AL→AX，</p><p data-pid=\"KDeJruhV\">若(AL)的最高有效位为0，则(AH)= 00H</p><p data-pid=\"-Coo1EGO\">(AL)的最高有效位为1，则(AH)= FFH</p><p data-pid=\"8Ht21Iju\">CWD：AX→(DX,AX)</p><p data-pid=\"AUkZVnEA\">若(AX)的最高有效位为0，则(DX)= 0000H</p><p data-pid=\"F3LQaKMl\">若(AX)的最高有效位为1，则(DX)= FFFFH</p><h3>3.3.2 算术指令</h3><h3>3.3.2.1 加法指令</h3><p data-pid=\"BynECKh7\">加法指令：    ADD  DST, SRC  </p><p data-pid=\"dI2TfD0A\">执行操作：    (DST)←(SRC) + (DST)</p><p data-pid=\"SYhARon0\">带进位加法指令：  ADC  DST, SRC  </p><p data-pid=\"9L3cQZzv\">执行操作：    (DST)←(SRC) + (DST) + CF</p><p data-pid=\"LMuiGSyu\">加1指令：        INC  OPR  </p><p data-pid=\"tdn58ZZ8\">执行操作：      (OPR)←(OPR) + 1</p><p data-pid=\"yzehINnZ\">CF 位表示 无符号数 相加的溢出。</p><p data-pid=\"VYVCaS3d\">OF 位表示 带符号数 相加的溢出。</p><p data-pid=\"8dzhkQ_P\">扩展方法：若最高位为0，则用0扩展，若最高位为1，则用1扩展。</p><h3>3.3.2.2 减法指令</h3><p data-pid=\"6h5_muc7\">减法指令：       SUB  DST, SRC  </p><p data-pid=\"lG_R0W6l\">执行操作：       (DST)←(DST) - (SRC)</p><p data-pid=\"agWAx30r\">带借位减法指令：   SBB  DST, SRC  </p><p data-pid=\"ZOFufE02\">执行操作：               (DST)←(DST) - (SRC) - CF</p><p data-pid=\"QTY-4Vz-\">减1指令：         DEC  OPR  </p><p data-pid=\"hzF7A9Kz\">执行操作：       (OPR)←(OPR) - 1</p><p data-pid=\"hd3gzOx6\">求补指令：       NEG  OPR  </p><p data-pid=\"1rV4WTls\">执行操作：       (OPR)←0FFFFH - (OPR)+1</p><p data-pid=\"2GJcvJe8\">比较指令：       CMP  OPR1, OPR2 </p><p data-pid=\"FCi0R_vR\">执行操作：      (OPR1) - (OPR2)，不保存结果，只是根据结果设置  标志位。</p><p data-pid=\"kE6ck1gG\">CF 位表示 无符号数 减法的溢出</p><p data-pid=\"pAG5RWDy\">CF 是被减数的最高有效位向高位的借位值。</p><p data-pid=\"LwXYtGjY\">OF 位表示 带符号数 减法的溢出</p><p data-pid=\"NyAvkqQ4\">若两个数的符号相反，而结果的符号与减数相同则 OF= 1</p><p data-pid=\"fVeGmI-C\">NEG 指令对CF/OF的影响：</p><p data-pid=\"WGuTT_Rc\">操作数为 0 时，CF = 0</p><p data-pid=\"Mxz2gH1x\">当字节运算时对 -128 求补以及字运算时对 -32768 求补时，OF = 1</p><h3>3.3.2.3 乘法指令</h3><p data-pid=\"nVAwcFzt\">无符号数乘法指令：MUL  SRC</p><p data-pid=\"xhhPr0js\">带符号数乘法指令：IMUL  SRC</p><p data-pid=\"rX2F6EzK\">字节操作数  (AX)←(AL) * (SRC)</p><p data-pid=\"QODY49Vz\">字操作数      (DX, AX)←(AX) * (SRC)</p><p data-pid=\"hN2FbxXE\">源操作数可以使用除立即数方式以外的任一种寻址方式 </p><p data-pid=\"ZIHl3wDG\">MUL乘积的高一半为零时，CF=OF=0，否则为1</p><p data-pid=\"qi_VV_0l\">IMUL乘积的高一半是低一半的符号扩展时，CF=OF=0，否则为1</p><h3>3.3.2.4 除法指令</h3><p data-pid=\"zUHPG_xY\">无符号数除法指令：   DIV  SRC</p><p data-pid=\"aGTRuH3e\">带符号数除法指令：   IDIV  SRC</p><p data-pid=\"-n1Fo5p7\">字节操作：  (AL)←(AX) / (SRC) 的商， (AH)←(AX) / (SRC) 的余数</p><p data-pid=\"jQlX-WcW\">​                                      (AH)←(AX) / (SRC) 的余数</p><p data-pid=\"czBhNH-M\">字操作：      (AX)←(DX, AX) / (SRC) 的商， (DX)←(DX, AX) / (SRC) 的余数</p><p data-pid=\"JsiI4u9T\">​                                      (DX)←(DX, AX) / (SRC) 的余数</p><h3>3.3.2.5 十进制调整指令</h3><p data-pid=\"NiS77328\">略</p><h3>3.3.3 逻辑指令</h3><h3>3.3.3.1 逻辑运算指令</h3><p data-pid=\"96hCu4h6\">AND DST,SRC 逻辑与</p><p data-pid=\"u6gSbnAp\">OR DST,SRC  逻辑或</p><p data-pid=\"xOQ16CIg\">NOT OPR 逻辑非</p><p data-pid=\"tYucNQJK\">XOR DST,SRC 逻辑异或</p><p data-pid=\"O5JSDfXY\">TEST OPR1,OPR2  测试，相当于逻辑与，但是不把结果存到目的操作数</p><h3>3.3.3.2 位移指令</h3><p data-pid=\"s8rZkDdR\">逻辑左移  SHL  OPR, CNT</p><p data-pid=\"X6IC4-45\">逻辑右移  SHR  OPR, CNT</p><p data-pid=\"b6WvEJC7\">算术左移  SAL  OPR, CNT（同逻辑左移）</p><p data-pid=\"gcyEvnPj\">算术右移  SAR  OPR, CNT</p><p data-pid=\"b6UIwCYT\">循环左移  ROL  OPR, CNT</p><p data-pid=\"WB2WO9x6\">循环右移  ROR  OPR, CNT</p><p data-pid=\"hsUZgk7g\">带进位循环左移  RCL  OPR, CNT</p><p data-pid=\"NhEyOqXx\">带进位循环右移  RCR  OPR, CNT</p><h3>3.3.4 串处理指令</h3><p data-pid=\"wqLCHXJz\">串传送：MOVS</p><p data-pid=\"Vmf3Tfpi\">存入串：STOS </p><p data-pid=\"BfKJBV9u\">取出串：LODS</p><p data-pid=\"8-Eb9dU0\">串比较：CMPS</p><p data-pid=\"aorNBMb8\">串扫描：SCAS      </p><h3>3.3.4.1 与 REP 配合工作的 MOVS,STOS和LODS指令</h3><p data-pid=\"6VxloG8D\">REP 重复串操作直到 (CX)=0 为止</p><p data-pid=\"qgNNDJp9\">格式：REP MOVS/LODS/STOS</p><p data-pid=\"F0Ia2Bpv\">MOVS    DST,SRC（DST及SRC只提供给汇编程序作类型检测用，实际上寻址方式是隐含的）</p><p data-pid=\"HLox3pJI\">MOVSB/MOVSW分别指定了字节和字</p><p data-pid=\"TQg7Krzy\">操作：</p><p data-pid=\"mykO_OLW\">((DI))←((SI))</p><p data-pid=\"uMUc81Ya\">字节操作：(SI)←(SI)±1,(DI)←(DI)±1（DF=0时用+，DF=1时用-）</p><p data-pid=\"q1bAzzRG\">字操作：(SI)←(SI)±2,(DI)←(DI)±2（DF=0时用+，DF=1时用-）</p><p data-pid=\"aWWG38wv\">执行指令前，应该做好以下准备工作：</p><ol><li data-pid=\"gBb2Lil3\">把存放于数据段中的源串首地址（如反向传送则应是末地址）放入 Sl 寄存器中</li><li data-pid=\"gDSAtn4W\">把将要存放数据串的附加段中的目的串首地址（或反同传送时的末地址）放入 Dl 寄存器中 </li><li data-pid=\"oFOdl8ln\">把数据串长度放入 CX 寄存器 </li><li data-pid=\"ietWoSu0\">建立方向标志</li></ol><p data-pid=\"HL_Wpvbu\">CLD：使DF=0，地址自动增量</p><p data-pid=\"gRjZQY8k\">STD：使DF=1，地址自动减量</p><p data-pid=\"rLueoSVb\">STOS    DST</p><p data-pid=\"6TOfnApc\">STOSB/STOSW</p><p data-pid=\"zkqMd9Px\">字节操作：((DI))←(AL),(DI)←(DI)±1</p><p data-pid=\"9CuwGeYu\">字操作：((DI))←(AX),(DI)←(DI)±2</p><p data-pid=\"aBg1Yr8U\">STOS 指令在初始化某一缓冲区时很有用</p><p data-pid=\"wlzRaQMR\">LODS    SRC</p><p data-pid=\"UAtgA_Km\">字节操作：(AL)←((SI)),(SI)←(SI)±1</p><p data-pid=\"AF7VC7r4\">字操作：(AX)←((SI)),(SI)←(SI)±2</p><h3>3.3.4.2 与 REPE/REPZ 和 REPNE/REPNZ 联合工作的 CMPS 和 SCAS 指令</h3><p data-pid=\"KA8zFWu-\">REPE/REPZ   当相等/为零时重复串操作</p><p data-pid=\"t99StJ4Z\">格式：REPE/REPZ    CMPS/SCAS</p><p data-pid=\"dTuEXb2F\">操作：</p><ol><li data-pid=\"AuZdyGR3\"> 如果(CX)=0或ZF=0时退出，否则继续执行<br/> </li><li data-pid=\"rNHDajPg\"> (CX)←(CX)-1<br/> </li><li data-pid=\"SiUUp_WU\"> 执行其后的串指令<br/> </li><li data-pid=\"FZx4jlWl\"> 重复 1~3<br/> </li></ol><p data-pid=\"A_IEYbfG\">REPNE/REPNZ 当不相等/不为零时重复串操作</p><p data-pid=\"hJz0STym\">CMPS 串比较指令</p><ol><li data-pid=\"Wo3qsn10\"> ((SI))-((DI))<br/> </li><li data-pid=\"XYd2s8C8\"> (SI)←(SI)±1,(DI)←(DI)±1<br/> </li></ol><p data-pid=\"fMjVmuQo\">SCAS 串扫描</p><p data-pid=\"JHLyKYch\">字节：(AL)-((DI)),(DI)←(DI) ±1</p><p data-pid=\"ABUrm4-I\">字：(AX)-((DI)),(DI)←(DI) ±2</p><h3>3.3.5 控制转移指令</h3><h3>3.3.5.1 无条件转移指令</h3><p data-pid=\"-QUvuHNG\">JMP SHORT OPR</p><p data-pid=\"qMp3rDQ6\">(IP)←(IP)+8位位移量</p><p data-pid=\"N4aliiLL\">JMP NEAR PTR OPR</p><p data-pid=\"UqAySg96\">(IP)←(IP)+16位位移量</p><p data-pid=\"xaQV0jbk\">JMP WORD PTR OPR</p><p data-pid=\"rvvVhtcc\">(IP)←(EA)</p><p data-pid=\"UPwxCr1K\">JMP FAR PTR OPR</p><p data-pid=\"M6YFjMad\">(IP)←OPR 的段内偏移地址</p><p data-pid=\"RXPTmT35\">(CS)←OPR 所在段的段地址</p><p data-pid=\"YxRg9vI5\">JMP DWORD PTR OPR</p><p data-pid=\"rsvdvviU\">(IP)←(EA)</p><p data-pid=\"oUL3hFqK\">(CS)←(EA+2)</p><h3>3.3.5.2 条件转移指令</h3><p data-pid=\"QlVxzLdy\">JZ/JE   结果为零(或相等)则转移</p><p data-pid=\"o81BWfzF\">JNZ/JNE 结果不为零(或不相等)则转移</p><p data-pid=\"75n0UVFD\">JS  结果为负则转移</p><p data-pid=\"97EiIEMI\">JNS 结果为正则转移</p><p data-pid=\"0diGo8bP\">JO  溢出则转移</p><p data-pid=\"RBQQr_SJ\">JP/JPE  奇偶位为 1 则转移</p><p data-pid=\"g_hnK-hg\">JB/JNAE/JC  CF = 1 则转移</p><p data-pid=\"b5xntgZQ\">JCXZ     (CX)=0 则转移</p><h3>3.3.5.3 循环指令</h3><p data-pid=\"3v71Tgp7\">LOOP    OPR</p><p data-pid=\"RWhVptvV\">条件：(CX)≠0</p><p data-pid=\"xyTSqiBg\">LOOPZ/LOOPE OPR</p><p data-pid=\"ZxK9RZId\">条件：ZF=1且(CX)≠0</p><p data-pid=\"2kNfigYi\">LOOPNZ/LOOPNE   OPR</p><p data-pid=\"Bue9V0VE\">条件：ZF=0且(CX)≠0</p><p data-pid=\"LhtG_9du\">步骤：</p><ol><li data-pid=\"OLuJVtMd\">(CX)←(CX)-1</li><li data-pid=\"9QpLZPX2\">检测是否满足条件，满足则修改 IP</li></ol><p data-pid=\"WeVdCkrl\">OPR 是一个表示转向地址的标号</p><h3>3.3.5.4 子程序</h3><p data-pid=\"yZGyNlnX\">CALL 调用</p><p data-pid=\"2OOjHWP2\">RET 返回</p><p data-pid=\"d1r6EdWo\">格式：CALL DST</p><p data-pid=\"fWJoH6ts\">执行的操作：</p><p data-pid=\"IAgsgs2d\">段内间接调用：</p><p data-pid=\"zlLX8SaL\">(SP)←(SP)-2</p><p data-pid=\"hri7Q-jB\">((SP)+1,(SP))←(IP)</p><p data-pid=\"jRwQlzhV\">(IP)←(EA)</p><p data-pid=\"sS0iDWBW\">段间间接调用：</p><p data-pid=\"2GJnW4Es\">(SP)←(SP)-2</p><p data-pid=\"xjtgRr6J\">((SP)+1,(SP))←(CS)</p><p data-pid=\"2u4vDc1F\">(SP)←(SP)-2</p><p data-pid=\"m5K91O-r\">((SP)+1,(SP))←(IP)</p><p data-pid=\"U4f9WvUd\">(IP)←(EA)</p><p data-pid=\"tUgXKTtW\">(CS)←(EA+2)</p><p data-pid=\"eTVgjxtm\">带立即数返回</p><p data-pid=\"fJMg7cNP\">RET EXP 会将 EXP 表示的位移量加到(SP)上</p><h3>3.3.5.5 中断</h3><h3>3.3.6 处理机控制指令</h3><h3>3.3.6.1 标志处理指令</h3><p data-pid=\"eu27s9RG\">CLC  进位位置0指令                     ；CF ← 0</p><p data-pid=\"V2Zb3mvG\">STC  进位位置1指令                     ；CF ← 1</p><p data-pid=\"_Hj7iBB4\">CMC  进位位求反指令                   ；CF ← Not(CF)</p><p data-pid=\"hyLU-WEj\">CLD  方向标志位置0指令             ；DF ← 0</p><p data-pid=\"2Y-88TPB\">STD  方向标志位置1指令             ；DF ← 1</p><p data-pid=\"xvLpeF2e\">CLI  中断标志位置0指令             ；IF ← 0 </p><p data-pid=\"SIi1yXDs\">STI  中断标志位置1指令             ；IF ← 1</p><h3>3.3.6.2 其他处理机控制指令</h3><p data-pid=\"VPVnpBK6\">NOP：空操作指令，不执行任何操作，但占用一个字节存储单元，空耗一个指令执行周期，常用于程序调试</p><p data-pid=\"EkX0rcxG\">HLT：暂停指令，在等待中断信号时，该指令使CPU处于暂停工作状态，CS:IP指向下一条待执行的指令。当产生了中断信号，CPU把CS和IP压栈，并转入中断处理程序。在中断处理程序执行完后，中断返回指令IRET弹出IP和CS，并唤醒CPU执行下条指令。</p><h2>第四章 汇编语言程序格式</h2><h2>4.1 汇编程序功能</h2><p data-pid=\"aIoGpG16\">用编辑程序建立 ASM（汇编） 源文件</p><p data-pid=\"7ITobOKW\">用 ASM 程序把 ASM 文件转换成 OBJ 文件</p><p data-pid=\"1Mkqeamj\">用 LINK 程序把 OBJ 文件转换成 EXE 文件</p><p data-pid=\"UU6ZZi2s\">用 DOS 命令直接键入文件名就可执行该程序</p><p data-pid=\"0FJJiV6M\">汇编程序的主要功能是</p><ol><li data-pid=\"gWWzR6yO\">检查源程序</li><li data-pid=\"YTuZWLhj\">测出源程序中的语法错误，并给出出错信息</li><li data-pid=\"ZFg9AUJY\">产生源程序的目标程序，并给出列表文件</li><li data-pid=\"0zx4V7Ns\">展开宏指令</li></ol><h2>4.2 伪操作</h2><p data-pid=\"pmrMJrux\">伪操作又称伪指令，是在汇编程序对源程序汇编期间由汇编程序处理的操作</p><h3>4.2.1 数据定义及存储器分配伪操作</h3><p data-pid=\"RTvNSaSx\">格式：[Variable] Mnemonic  Operand,…,Operand</p><p data-pid=\"MLVsjc81\">DB 定义字节</p><p data-pid=\"3shha-f6\">DW 定义字</p><p data-pid=\"TZXEh1N8\">DD 定义双字，存地址时，第一个字为偏移地址，第二个字为段地址</p><p data-pid=\"FgM1iy-p\">DQ 定义四个字</p><p data-pid=\"kyR4_qdn\">DT 定义十个字节</p><p data-pid=\"ZDuUAZ8E\">这些伪操作可以把其后跟着的数据存入指定的存储单元，或只分配存储器空间。</p><p data-pid=\"UReKll1N\">repeat_count DUP(operand,...,operand) 可以复制操作数</p><p data-pid=\"Ck2o-5To\">? 表示空位，占有空间但是不存放内容。</p><p data-pid=\"z1caGDEa\">用 type PRT(属性操作符) Variable 来指定操作数的类型属性，优先于隐含的类型属性</p><p data-pid=\"e2ElIbaJ\">除了属性操作符，可以用 LABEL 伪操作来定义，格式：name LABEL type</p><p data-pid=\"uiGPWDBj\">类型可以是 BYTE 字节 WORD 字 DWORD 双字</p><h3>4.2.2 表达式赋值伪操作 EQU</h3><p data-pid=\"4o7uNZqV\">用赋值伪操作给表达式赋予一个名字</p><p data-pid=\"6VNFPD4L\">Expression_name EQU Expression</p><p data-pid=\"lSHYlsLh\">此后可以用表达式名来代替表达式</p><p data-pid=\"8XMgfcLP\">如果 EQU 语句的表达式中有变量或标号的表达式，则在该语句前给出它们的定义</p><p data-pid=\"mXm22w1k\">EQU 伪操作与 = 伪操作的区别是，前者不允许重复定义，而后者允许。</p><h3>4.2.3 段定义伪操作</h3><p data-pid=\"NwTU4yT5\">segment name    SEGMENT</p><p data-pid=\"ZtjkzQTw\">...</p><p data-pid=\"V0ynkFEH\">segment name ENDS</p><p data-pid=\"ParSA7xI\">还需要用 ASSUME 伪操作来明确段和段寄存器的关系</p><p data-pid=\"xwKBfZid\">ASSUME register_name:segment_name,register_name:segment_name</p><p data-pid=\"hjAMrp9U\">ASSUME  NOTHING 可以取消前面由 ASSUME 所指定的段寄存器</p><p data-pid=\"CJ4z96PO\">ASSUME 伪操作只是指定某个段分配给哪一个段寄存器，并不能把段地址装入段寄存器中</p><p data-pid=\"9aGk5tEz\">在程序的代码段开始处就应该先进行DS、ES、SS段基址的装填，否则无法正确对数据进行寻址操作。CS由系统自动装填。</p><p data-pid=\"1C0GQ5Md\">定位类型</p><p data-pid=\"i4S3XdFU\">PARA 指定段的起始地址必须从小段边界开始，即段地址的最低十六进制数位为 0</p><p data-pid=\"iydqmIy_\">BYTE 该段可以从任何地址开始</p><p data-pid=\"nBdV96Bv\">WORD 该段必须从字的边界开始，即段地址必须为偶数</p><p data-pid=\"_TZWgWU9\">PAGE 该段必须从页的边界开始，即段地址的最低两个16进制数位必须为 0</p><p data-pid=\"GyAfck_z\">组合类型</p><p data-pid=\"hUzZP70f\">PUBLIC 该段连接时将与有相同名字的其他分段连接在一起</p><p data-pid=\"FUZ5T3DM\">COMMON 该段在连接时与其他同名分段有相同的起始地址，所以会产生覆盖</p><p data-pid=\"mswvb_LZ\">COMMON 的连接长度是各分段中的最大长度</p><p data-pid=\"VEfWB84_\">STACK 指定该段在运行时为堆栈段的一部分</p><p data-pid=\"QSSBTTLJ\">MEMORY 指定该段将分配在所有其他连接在一起的段的前面（高地址）</p><p data-pid=\"-QIbHGOZ\">类别（&#39;class&#39;） 连接时用于组成段组的名字</p><p data-pid=\"-QtvuNZq\">grpname GROUP segname[,segname…]</p><p data-pid=\"OFITfUKA\">可以允许用户自行指定段组，这样程序可以用同一个段寄存器访问定义在不同段中的变量</p><h3>4.2.4 程序开始和结束伪操作</h3><p data-pid=\"UKxXUlwg\">在程序的开始可以用 NAME 或 TITLE 为模块取名字</p><p data-pid=\"-WEVzXwr\">NAME module_name</p><p data-pid=\"NCpTMWkx\">TITLE text（不加引号的字符串）</p><p data-pid=\"H-Dap_D4\">如果程序中没有使用 NAME 伪操作，则汇编程序将用 text 中的前六个字符作为模块名</p><p data-pid=\"x5SvXgF0\">text 最多可以有 60 个字符</p><p data-pid=\"QN6otdZM\">如果程序中既无 NAME 又无 TITLE 伪操作，则将用源文件名作为模块名</p><p data-pid=\"1oYFiFES\">表示源程序结束的伪操作的格式为：END [label]</p><p data-pid=\"p9LBiThR\">label 指示程序开始执行的起始地址，如果多个程序模块相连接，则只有主程序使用标号，其他子程序模块只用END而不必指定标号。</p><h3>4.2.5 对准伪操作</h3><p data-pid=\"UhKoz84p\">EVEN 伪操作使下一个字节地址成为偶数</p><p data-pid=\"6PJKS7MU\">对于字数组，最好保证其从偶地址开始</p><p data-pid=\"wt3tDei0\">ORG Constant expression 伪操作可以使下一个字节的地址成为常数表达式的值 n</p><p data-pid=\"RYMsWniW\">在汇编程序对源程序汇编的过程中，使用地址计数器来保存当前正在汇编的指令的地址</p><p data-pid=\"A9XraFHs\">地址计数器的值可用 $ 来表示</p><h3>4.2.6 基数控制伪操作</h3><p data-pid=\"21y_RqUD\">汇编程序默认的数为十进制数</p><p data-pid=\"zoURhOtS\">十六进制数的第一个字符必须是 0~9，否则前面加上数字 0</p><p data-pid=\"MG3uw0Hn\">RADIX expression 可以把默认的基数改变为 2~16 内的任何基数</p><h2>4.3 汇编语言程序格式</h2><p data-pid=\"3vbsg7NQ\">[name] operation operand [;comment]</p><p data-pid=\"WB4pkPhl\">操作项是一个操作码的助记符，可以是指令、伪操作或宏指令名</p><p data-pid=\"13Mz2JFm\">操作数项由一个或多个表达式组成</p><h3>4.3.1 名字项</h3><p data-pid=\"9RPWa75f\">除数字外，所有字符都可以放在源语句的第一个位置</p><p data-pid=\"dUoO3PY-\">名字由如果用到原点(.)则必须是第一个字符</p><p data-pid=\"ZalSJ56D\">单独的“?”不能作为名字</p><p data-pid=\"YNL-uXtu\">可以用很多字符来说明名字，但只有前面的31个字符能被汇编程序所识别。</p><p data-pid=\"M4PjA_SW\">标号用来代表一条指令所在单元的地址，在代码段中定义及使用。</p><p data-pid=\"j7QC1zbG\">标号放在语句的前面，并用冒号“:”与操作项分开。</p><p data-pid=\"7gH51HhQ\">标号不是每条指令所必需的，它也可以用LABEL或EQU伪指令来定义</p><p data-pid=\"kRVBHAzJ\">标号经常在转移指令或CALL指令的操作数字段出现，用以表示转向的目标地址</p><p data-pid=\"IpJc7ZWM\">标号和变量都具有三种属性：段属性、偏移属性及类型属性</p><p data-pid=\"-H-kJgZr\">段属性定义标号或变量的段起始地址，此值必须在一个段寄存器中。</p><p data-pid=\"0U3X4P8n\">偏移属性是标号或变量所在的地址距段基址的偏移量。它们通常在指令中以显式方式出现，并最终能确定其有效地址EA。</p><p data-pid=\"g4EKCwE8\">标号的类型属性用来指出该标号是在本段内引用还是在其它段中引用。如在段内引用的，则称为NEAR，指针长度为2个字节；如在段外引用，则称为FAR，指针长度为4个字节。</p><p data-pid=\"_OOx_9eJ\">变量的类型属性定义该变量所保留的字节数。如BYTE（1字节），WORD（2字节），DWORD（4字节），FWORD（6字节），QWORD（8字节），TBYTE（10字节）。</p><p data-pid=\"srpM-n2x\">在同一个程序中，同样的标号或变量的定义只允许出现一次，否则汇编程序会提示出错。</p><h3>4.3.2 操作项</h3><p data-pid=\"Syzmtkyu\">操作项可以是指令、伪操作或宏指令</p><p data-pid=\"IG1F1H4W\">对于指令，汇编程序将其翻译为机器语言指令。</p><p data-pid=\"S5-RsNoC\">对于伪操作，汇编程序将根据其所要求的功能进行处理。</p><p data-pid=\"24o2e6t4\">对于宏指令，则将根据其定义展开。 </p><h3>4.3.3 操作数项</h3><h3>4.3.3.1 算术操作符</h3><p data-pid=\"fwIvnMms\">算术操作符：  +、- 、*、 /、Mod</p><p data-pid=\"Eo6s52Rc\">算术操作符可以用于数字表达式或地址表达式</p><p data-pid=\"z6Dr3hhC\">地址+或-是有意义的，但两个地址*或/是无意义的。</p><h3>4.3.3.2 逻辑操作符</h3><p data-pid=\"U2cBp0ZS\">AND、OR、XOR 和 NOT </p><p data-pid=\"wgjqLguh\">逻辑操作符是按位操作的 ，它只能用于数字表达式中</p><h3>4.3.3.3 关系操作符</h3><p data-pid=\"Up-7iRjs\">EQ(相等) 、 NE(不等)、 LT( 小于) 、 GT( 大于 ) 、LE(小于或等于) 、 GE( 大于或等于 )</p><p data-pid=\"8SctN2Jz\">关系操作符的两个操作数必须都是数字或是同一段内的两个存储器地址</p><p data-pid=\"9iiTLgJM\">计算的结果应为逻辑值：结果为真，表示为 0FFFFH ，结果为假，则表示为 0 。 </p><h3>4.3.3.4 数值回送操作符</h3><p data-pid=\"Voxrd1Sv\">TYPE：返回变量以字节数表示的类型</p><p data-pid=\"YpYBzZ80\">DB 2</p><p data-pid=\"ticUN9qU\">DW 4</p><p data-pid=\"T7eLMvGY\">DD 6</p><p data-pid=\"Xug5SEZw\">DQ 8</p><p data-pid=\"QcB0SzNd\">DT 10</p><p data-pid=\"SCxmwXQs\">NEAR -1</p><p data-pid=\"rC_5Cgb3\">FAR -2</p><p data-pid=\"T9Al3X2x\">常数 0</p><p data-pid=\"k_vn8I18\">LENGTH：对于变量中使用DUP的情况，返回分配给该变量的单元数，其他情况返回1.</p><p data-pid=\"U36vfA5A\">SIZE：返回分配给该变量的字节数，等于TYPE值*LENGTH值。</p><p data-pid=\"o4EqZbay\">OFFSET：回送变量或标号的偏移地址</p><p data-pid=\"H0c7fdD1\">SEG：回送变量或标号的段地址</p><h3>4.3.3.5 属性操作符</h3><p data-pid=\"5fyvjMNt\">SHORT：用来修饰跳转指令中转向地址的属性，指出转向地址在下一条指令的-127~+127个字节范围之内</p><p data-pid=\"LNDzdMkW\">HIGH和LOW ：字节分离操作符。对一个数或表达式，HIGH取其高字节，LOW取其低字节。</p><p data-pid=\"3qJUjOfB\">HIGHWORD、LOWWORD：字分离操作符。对一个数或表达式，HIGHWORD取其高位字，LOWWORD取其低位字。</p><h2>第五章 循环与分支程序设计</h2><h2>5.1  循环程序设计</h2><h3>5.1.1 循环程序的结构形式</h3><p data-pid=\"-GJr_DFi\">不论何种循环结构，循环程序都由以下三个部分组成</p><ol><li data-pid=\"uhBjIwJq\">设置循环的初始状态</li><li data-pid=\"FGavAFoh\">循环体</li><li data-pid=\"htrrr_mP\">循环控制部分</li></ol><h3>5.1.2 循环程序设计方法</h3><h2>5.2 分支程序设计</h2><h2>第六章 子程序结构</h2><h2>6.1 子程序的设计方法</h2><h3>6.1.1 过程定义伪操作</h3><p data-pid=\"XKNHOSUL\">procedure_name PROC Attribute</p><p data-pid=\"Hbe0eZ6q\">...</p><p data-pid=\"qxXkHN8D\">procedure_name ENDP</p><p data-pid=\"2LefRqin\">procedure_name 是子程序入口的符号地址</p><p data-pid=\"Y-Feg7nC\">Attribute 是类型属性，可以是 NEAR 或 FAR</p><p data-pid=\"6Ifh01r3\">调用程序和过程在同一个代码段中，使用 NEAR 属性</p><p data-pid=\"Y2bk1eKC\">调用程序和过程不在同一个代码段中，使用 FAR 属性</p><h3>6.1.2 子程序的调用和返回</h3><p data-pid=\"vK4QHhTw\">CALL 和 RET 指令就完成了调用和返回的功能。但是要注意 PROC 的属性和子程序运行期间的堆栈状态。</p><h3>6.1.3 保存与恢复寄存器</h3><p data-pid=\"v2HdUu-d\">要仔细考虑哪些寄存器是必循保存的，哪些是不必要或不应该保存的。一般说来，子程序中用到的寄存器是应该保存的。但是，如果使用寄存器来在主程序和   子程序之间传送参数的话，这种寄存器就不一定需要保存，特别是用来向主程序回送结果的寄存器，就更不应该因保存和恢复寄存器而破坏了应该向主程序传送的信息。</p><h3>6.1.4 子程序的变量传送</h3><h3>6.1.4.1 通过寄存器传送变量</h3><p data-pid=\"90pfVFEF\">子程序对带有出口参数的寄存器不能保护和恢复</p><p data-pid=\"GHz2Fut3\">对于带有入口参数的寄存器建议保护</p><p data-pid=\"ydG4PTYa\">保护方法：</p><p data-pid=\"Yje9mX3B\">PUSH AX</p><p data-pid=\"ETWwZDh7\">PUSH BX</p><p data-pid=\"OHBJqIqy\">PUSH CX</p><p data-pid=\"4zQ0XBBU\">PUSH DX</p><p data-pid=\"b5ZVDWPs\">...</p><p data-pid=\"IS8kohUI\">POP DX</p><p data-pid=\"gZuQATfF\">POP CX</p><p data-pid=\"97qaRY-n\">POP BX</p><p data-pid=\"KhgZcdd_\">POP AX</p><h3>6.1.4.2 直接访问模块中的变量</h3><p data-pid=\"FHRhppNh\">主程序和子程序直接采用同一个变量名共享同一个变量，实现参数的传递。</p><h3>6.1.4.3 通过地址表传送参数地址</h3><p data-pid=\"QuD3t5jQ\">将每组数据的首地址存到 SI 中，元素个数存在  CX 中，子程序用 SI 寻址获得参数</p><h3>6.1.4.4 通过堆栈传送参数或参数地址</h3><p data-pid=\"J1n9lEK3\">主程序将子程序的入口参数压入堆栈，子程序从堆栈中取出参数； 子程序将出口参数压入堆栈，主程序弹出堆栈取得它们。</p><p data-pid=\"qoNVd2s4\">为了避免直接对 SP 的值进行修改，可以用 BP 暂存 SP，然后用寻址方式调用参数。</p><h3>6.1.4.5 多个模块之间的参数传送问题</h3><p data-pid=\"3ZB1yvz_\">标识符有两种： 1）在本模块中定义，供本模块使用的标识符称为局部标识符；2）在一个模块中定义，而又在另一个模块中引用的标识符称为外部标识符。</p><p data-pid=\"mdTvf3_h\">PUBLIC 标识符[,标识符…]；定义标识符的模块使用</p><p data-pid=\"2FSp44UT\">EXTRN 标识符:类型 [,标识符:类型...];调用标识符的模块使用</p><p data-pid=\"PgpkgsAV\">标识符可以是变量名、标号、过程名等</p><p data-pid=\"8dbhgmQ1\">类型是 byte/word/dword 或 near/far</p><p data-pid=\"MBgacHih\">各模块间的public/extrn伪指令要互相配对，并且指明的类型互相一致。</p><p data-pid=\"ReaTHsx4\">模块连接方法有：1.在汇编时把各个模块连接在一起；2.LINK 连接时把各个模块连接在一起</p><p data-pid=\"VbWSLgEa\">在汇编时把各个模块连接在一起，要使用 INCLUDE 文件名。每个 INCLUDE 后面只能由一个文件名。不能有重名标号。</p><p data-pid=\"Hu8Cc3ka\">LINK连接各个模块时，需要用 PUBLIC 和 EXTRN 语句，放在所有段前面</p><h3>6.2 子程序嵌套</h3><h2>第 7 章 高级汇编语言技术</h2><h2>7.1 宏汇编</h2><h3>7.1.1 宏定义、宏调用和宏展开</h3><p data-pid=\"vU4DccGz\">宏定义的格式</p><p data-pid=\"bK0D5Si6\">宏指令名    MACRO    [形式参数表]             ．．．     ; 宏体             ENDM（和子程序不同，ENDM之前不用写宏名）</p><p data-pid=\"I4zkUDUr\">实参和形参的个数可以不等，若调用时的实参个数多于形参个数，则多余的部分被忽略；若实参个数小于形参个数，则多余的形参假定为空（NULL）。</p><p data-pid=\"0yh525fe\">宏调用的格式：</p><p data-pid=\"miG68-8u\">宏指令名 [实参表]</p><p data-pid=\"PYuoupns\">实参表通常与宏定义中形参表相对应。当需要使用多个实参时,各实参之间要用逗号分隔。</p><p data-pid=\"ls3zC0An\">宏定义可以放在程序的任何地方（调用处之前），一般建议把宏定义放在程序的最前面。</p><p data-pid=\"2msKwNNt\">宏展开：</p><p data-pid=\"JxJrI3nz\">当汇编程序扫描源程序遇到已有定义的宏调用(宏指令)时，即用相应的宏定义体取代源程序的宏指令，同时用位置匹配的实参对形参进行取代。</p><h3>7.1.2 宏定义中的参数</h3><p data-pid=\"FZWAH8hz\">宏体可以没有形参</p><p data-pid=\"Q0h3JAh3\">形参可以是操作码  </p><p data-pid=\"7EO552UE\">形参可以是操作码的一部分，但是要用&amp;作为分隔符</p><p data-pid=\"qtjrMRvP\">%表达式 可以在宏调用时强迫后面的表达式立即求值，并把表达式的结果作为实参替换，而不是表达式本身。</p><p data-pid=\"D2MhN-v2\">!字符 可以转义操作符，把后面的字符当成普通字符对待</p><h3>7.1.3 LOCAL 伪操作</h3><p data-pid=\"H-NK6LhL\">LOCAL伪指令的一般格式：</p><p data-pid=\"nWj92n3S\">LOCAL  标号及变量表</p><p data-pid=\"ACkWRxny\">各标号、变量之间均用逗号分隔</p><p data-pid=\"Uk0KXUus\">LOCAL伪操作只用在宏定义体内，且LOCAL伪指令必须紧接MACRO伪指令之后，它们中间不能有注释和分号标志。</p><p data-pid=\"eCVIlJjI\">在处理各个宏调用时，汇编程序将自动以??0000，??0001，……，??FFFF替代LOCAL从伪指令列出的各个标号或变量，从而避免多次宏调用时出现多个相同标号或出现变量重复定义的问题。</p><h3>7.1.4 在宏定义内使用宏</h3><p data-pid=\"ab--j6G5\">宏嵌套像子程序一样包括两种情况： 其一：宏体中包括宏定义。  其二：宏定义的宏体中包括宏调用，即在宏体中调用宏体外定义的宏指令。在这种情况下要注意，其调用的宏指令必须先行定义；</p><p data-pid=\"soBdulX9\">不能在源程序中直接调用内层定义的宏指令</p><h3>7.1.5 列表伪操作</h3><h3>7.1.6 宏库的建立与调用</h3><p data-pid=\"JYPkDBE0\">宏库的扩展名可以是*.mac、*.lib、或*.asm。</p><p data-pid=\"Ly2r3kFq\">调用插入伪指令 INCLUDE </p><p data-pid=\"gAGUJymr\">格式：INCLUDE  [ 驱动器名：][目录路径]文件名.扩展名</p><h3>7.1.7 PURGE 伪操作</h3><p data-pid=\"UrFXeUnr\">删除宏库中部分宏伪指令PURGE</p><p data-pid=\"4jW126R8\">格式：PURGE 宏指令名</p><p data-pid=\"4SGN9Rfb\">宏指令名可以与指令助记符及伪指令名同名。在此情况下，宏指令的优先级较高，同名的指令或伪指令的原有功能失效。若要恢复其原有功能，可以使用清除宏定义的伪指令。</p><h2>7.2 重复汇编</h2><h3>7.2.1 重复伪操作</h3><p data-pid=\"tdQ1Jg8P\">重复汇编格式：</p><p data-pid=\"AL1sEoZe\">REPT 整数表达式</p><p data-pid=\"14yU1ntT\">​   重复体</p><p data-pid=\"mPZI0I6i\">ENDM</p><p data-pid=\"lLhINs8J\">功能：使汇编程序对重复体作重复汇编，以整数表达式的值作为重复次数。</p><h3>7.2.2 不定重复伪操作</h3><p data-pid=\"1cYSQ0e3\">IRP 伪操作</p><p data-pid=\"5cmiFuGW\">格式：</p><p data-pid=\"-yQkdeQO\">IRP    形参，＜实参表＞  </p><p data-pid=\"jVkCBO0H\">​   重复体</p><p data-pid=\"sEmELbao\">ENDM</p><p data-pid=\"8VOkqOHw\">功能：使汇编程序对重复体作重复汇编，每作一次汇编就依次将实参表中的一个实参取代重复体中的形参。 </p><p data-pid=\"-qu7Z10Q\">IRPC伪操作 格式：</p><p data-pid=\"twta-rcV\">IRPC  形参，字符串     重复体 ENDM 功能：使汇编程序对重复体作重复汇编，每作一次汇编就依次用字符串中的一个字符取代重复体中的形参。 与IRP相似，但实参必须是字符串。</p><h2>第 8 章 输入输出程序设计</h2><h2>8.1 I/O 设备的数据传送方式</h2><h3>8.1.1 CPU 与外设</h3><p data-pid=\"kxfvHB7T\">CPU与外设之间的接口信号：</p><p data-pid=\"s-V1SwWJ\">数据信息、状态信息、控制信息</p><p data-pid=\"XYCWkdpi\">数据信息：这是CPU和外设之间真正要交换的信息。</p><p data-pid=\"UC-l1qTp\">状态信息：用来反映外设接口电路或外设的状态，CPU可根据这些状态信息决定对外设的操作或控制。</p><p data-pid=\"RkZIXZtU\">控制信息：用于控制输入输出设备装置的启动或停止，设备的工作方式等。</p><h3>8.1.2 直接存储器存取方式</h3><p data-pid=\"jJxrjReD\">主机与外设之间的数据传送(控制)方式：</p><p data-pid=\"p2YLqYgw\">●直接存储器存取(DMA)方式 ●程序直接控制I/O方式（查询方式） ●中断传送方式</p><p data-pid=\"w-Lh7upc\">DMA一般包括四个寄存器：控制寄存器（设置控制字：输入/输出、启动DMA等）、状态寄存器（DMAC状态）、地址寄存器（要传送数据块的首地址）、和字节计数器（要传送的数据字节数），这些寄存器在数据传送之前应该初始化。</p><p data-pid=\"jSxR9R27\">在实现DMA传输时，由DMA控制器直接掌管总线，因此，存在着一个总线控制权转移问题。即DMA传输前，CPU要把总线控制权交给DMA控制器，而在结束DMA传输后，DMA控制器应立即把总线控制权再交回给CPU。</p><h2>8.2 程序直接控制 I/O 方式</h2><h3>8.2.2 I/O 命令</h3><p data-pid=\"6RgjzJn2\">直接寻址：只用于寻址00H～0FFH前256个端口，操作数表示端口号。 间接寻址：可用于寻址全部64K个端口，DX寄存器的值就是端口号，对大于0FFH的端口只能采用间接寻址方式。</p><p data-pid=\"IAUAwgy_\">IN 指令可以从一个状态寄存器输入接口和外设的状态</p><p data-pid=\"m3akS0Yl\">OUT 指令可以给一个指定的 I/O 端口传送命令信息</p><p data-pid=\"gRxG4iwy\">长格式</p><p data-pid=\"RqSkLgm4\">IN/OUT AL,PORT</p><p data-pid=\"crVcLJ77\">IN/OUT AX,PORT</p><p data-pid=\"94YMYLZ1\">短格式</p><p data-pid=\"qyts-ypd\">IN/OUT AL,DX</p><p data-pid=\"jKOWKslZ\">IN/OUT AX,DX</p><h2>8.3 中断传送方式</h2><p data-pid=\"gu0ySBwJ\">当CPU正在执行某程序时，由于外界事件的需要向CPU发出申请，CPU暂停现行程序的执行而转去处理临时发生的事件，处理完后再返回到被中断程序的断点处，继续向下执行，这个过程称为<b>中断</b>。</p><p data-pid=\"rV_MSbbt\">中断是CPU和外部设备进行I/O的有效方法。它可以避免因反复查询外部设备的状态而浪费时间，提高CPU的效率。</p><p data-pid=\"wfK8mUp8\">在中断过程中执行的事件处理程序称为<b>中断服务程序</b></p><p data-pid=\"yPLGCMuw\">三种数据传送方式速度对比： 直接I/O&lt;中断&lt;DMA</p><h3>8.3.1 中断分类</h3><h3>8.3.1.1 软件中断</h3><p data-pid=\"bd1k-_Yk\">软件中断（内中断）：由程序安排的中断指令产生的中断、或CPU的某些错误结果产生的中断</p><p data-pid=\"BjeFSHDN\">（1）中断0——除法错中断；除数为0或商超过了寄存器的范围     （2）中断1——单步中断； TF＝1，允许单步调试    （3）中断3——断点中断；用于断点调试（INT   3）     （4）中断4——溢出中断；执行溢出中断指令，OF＝1时产生    （5）用户定义的软件中断(指令中断) ：执行中断调用指令INT  n产生的  n号中断，如INT 21h</p><p data-pid=\"P9emg9JW\">所有的内部中断都具有下述特点： 1）中断向量码或者包含在指令中，或者是预定的； 2）除单步中断外，内部中断都无法禁止； 3）除单步中断外，任何内部中断的优先级都比任何外部中断的高。</p><p data-pid=\"RPZQcX2g\">中断调用指令</p><p data-pid=\"-viUNxJJ\">INT n</p><p data-pid=\"fwa0FBMJ\">n称为中断类型号，必须是0~255之间的立即数</p><p data-pid=\"XQ-r2JoM\">中断返回指令</p><p data-pid=\"78ASXJ2c\">IRET</p><h3>8.3.1.2 硬件中断</h3><p data-pid=\"jUVlcQzh\">硬件中断（外中断）：由外设控制器或协处理器引起的中断。 可屏蔽中断：可被中断允许标志IF的屏蔽。 非屏蔽中断（NMI）：为电源错、内存或I/O总线的奇偶校验等异常事件保留的中断。它不受中断允许标志IF的屏蔽。整个系统只能有一个NMI。</p><p data-pid=\"XlA2MuL5\">从外设发出的中断请求到CPU响应中断，有两个控制条件起决定作用： 1)外设的中断请求是否被屏蔽,  2)CPU是否允许相应中断。</p><p data-pid=\"qaUMFe7q\">CLI 关中断</p><p data-pid=\"Lutaswxd\">STI 开中断</p><p data-pid=\"tUnECdFl\">中断屏蔽寄存器的I/O地址是21H，他的8位对应控制8个外部设备，某位0表示允许中断，1表示禁止中断。</p><p data-pid=\"2yOlyjpI\">在一次中断处理结束之前，还应给8259A的中断命令寄存器发出中断结束命令（End of Interrupt, EOI, 第5位）。</p><p data-pid=\"c2ycEHyw\">中断命令寄存器的I/O端口地址为20H。</p><p data-pid=\"IhVP35lM\">当EOI=1时，当前正在处理的中断请求被清除。所以在中断处理完成后，必须把EOI为置1。</p><p data-pid=\"seUZDs8f\">L2~L0指定IR0-IR7中具有最低优先级的中断请求，第6、7位控制IR0-IR7中断优先级的顺序。</p><p data-pid=\"nphArjBo\">中断优先级：</p><p data-pid=\"yzAuK29-\">除法错、INT、INTO</p><p data-pid=\"NmNtRn88\">NMI</p><p data-pid=\"nMBI3aXy\">INTR</p><p data-pid=\"E4HXDTju\">单步中断</p><h3>8.3.2 中断向量表</h3><p data-pid=\"QGBMY6pm\">中断向量表：中断服务程序的入口地址。    </p><p data-pid=\"QTgrOdnX\">8086/8088在其内存的前1K字节（地址为0000H~03FFH）建立了一个中断向量表。</p><p data-pid=\"i5O3IiTv\">表中内容分为256项，对应于类型号0~255。</p><p data-pid=\"1O1oZW3W\">每一项占用4个字节单元，用来存放相应类型的中断服务程序的入口地址。</p><p data-pid=\"53n---GK\">高两个字节存放服务程序的入口地址的段地址部分。低两个字节存放偏移地址。</p><p data-pid=\"LZ0iEKrh\">若中断号为N，则其中断子程序入口地址在向量表中的位置为： IP←(N*4+1, N*4) CS←(N*4+3, N*4+2)</p><h3>8.3.3 中断程序设计方法</h3><p data-pid=\"JMGzarNf\">可调用DOS功能调用（21H）来存取中断向量： 设置中断向量：把由AL指定的中断类型的中断向量DS:DX放入中断向量表。</p><p data-pid=\"wkOOmh48\">预置：AH=25H，AL=中断类型号，DS:DX=中断向量 执行：INT  21H</p><p data-pid=\"qtqVpEA_\">读取中断向量：把由AL指定的中断类型的中断向量从中断向量表中取到ES:BX。</p><p data-pid=\"CYTZA43t\">预置：AH=35H，AL=中断类型号 执行：INT  21H 返回：ES:BX=中断向量</p><p data-pid=\"dVRYDN-i\">中断程序的编写步骤： 主程序：    </p><p data-pid=\"924LLwDt\">​       （1）设置中断向量 ​       （2）设置 CPU 的中断允许位 IF ​       （3）设置设备的中断屏蔽位</p><p data-pid=\"QRd6juCv\">中断处理子程序：    </p><p data-pid=\"zE0u3cZs\">​            （1）保存寄存器内容 ​           （2）如允许中断嵌套，则开中断 ( STI ) ​            （3）中断处理功能 ​           （4）关中断（CLI） ​           （5）送中断结束命令( EOI )给中断命令寄存器 ​            （6）恢复寄存器内容 ​           （7）IRET 中断返回 </p><h2>第 9 章 BIOS及DOS功能调用</h2><h2>9.1 BIOS及DOS简介</h2><p data-pid=\"65C5dJ83\">只读存储器ROM中固化有一组外部设备驱动与管理软件，组成PC机基本输入输出系统BIOS</p><p data-pid=\"RPrIlXXD\">BIOS主要包括以下一些功能： ①系统自检及初始化 ②系统服务 ③硬件中断处理</p><p data-pid=\"LTwshHWN\">DOS 即磁盘操作系统，主要完成对文件、设备、内存的管理</p><p data-pid=\"6AvSqw64\">DOS 主要包括三个模块：<a href=\"https://link.zhihu.com/?target=http%3A//IBMBIO.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">IBMBIO.com</span><span class=\"invisible\"></span></a>，<a href=\"https://link.zhihu.com/?target=http%3A//IBMDOS.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">IBMDOS.com</span><span class=\"invisible\"></span></a>，<a href=\"https://link.zhihu.com/?target=http%3A//COMMAND.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">COMMAND.com</span><span class=\"invisible\"></span></a></p><p data-pid=\"tgBrGbKQ\"><a href=\"https://link.zhihu.com/?target=http%3A//IBMIO.COM\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">IBMIO.COM</span><span class=\"invisible\"></span></a>是DOS在ROM BIOS的基础上开发的一组输入输出设备处理程序</p><p data-pid=\"BCAI9LyQ\"><a href=\"https://link.zhihu.com/?target=http%3A//IBMDOS.COM\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">IBMDOS.COM</span><span class=\"invisible\"></span></a>是文件管理程序和一些处理程序</p><p data-pid=\"4TMvBJsJ\"><a href=\"https://link.zhihu.com/?target=http%3A//COMMAND.COM\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">COMMAND.COM</span><span class=\"invisible\"></span></a>是DOS的命令处理程序</p><p data-pid=\"eCbNR2os\">在一些情况下，既能选择DOS中断也能采用BIOS中断来执行相同的任务</p><p data-pid=\"WTP61DcN\">少数情况下，必须使用BIOS功能，没有相应的DOS功能调用</p><p data-pid=\"jFs7NMFU\">一般来说，使用DOS操作比使用相应功能的BIOS操作更简易，而且DOS对硬件的依赖性更少些。</p><p data-pid=\"_yupnbPK\">BIOS和基本DOS的作用</p><p data-pid=\"eAIyPmmc\">用户可通过使用BIOS和DOS系统提供的这些功能模块子程序（中断子程序调用），来编制直接管理和控制计算机硬件设备的底层软件（主要是完成I/O操作）。</p><p data-pid=\"CM2swA3r\">用户不必深入了解有关设备的电路和接口，只须遵照DOS规定的调用原则即可使用。 </p><p data-pid=\"VKr9Jvst\">用户编程原则</p><p data-pid=\"NtdtjFiv\">尽可能使用DOS的系统功能调用。 在DOS功能不能实现情况下，考虑用BIOS功能调用。 在DOS和BIOS的中断子程序不能解决问题时，使用IN/OUT指令直接控制硬件。</p><p data-pid=\"J2c8ySb6\">BIOS/DOS的每个功能都对应着一个中断服务程序 BIOS/DOS中断属于软件中断</p><p data-pid=\"Z2OrJ4kr\">① DOS中断：n＝ 20H～3FH ② BIOS中断：n＝5H～1FH ③ 自由中断：n＝40H～FFH（用户可自定义）</p><p data-pid=\"IJbA74eo\">一般来说，调用DOS或BIOS功能时，有以下几个步骤：</p><p data-pid=\"tCDlKubu\">（1）将调用参数装入指定的寄存器。</p><p data-pid=\"YuZjkiUh\">（2）如需功能调用号，把它装入AH。</p><p data-pid=\"uBsyuYPU\">（3）如需子功能调用号，把它装入AL。</p><p data-pid=\"oQy9dO5K\">（4）按中断号调用DOS或BIOS。</p><p data-pid=\"2IHdHJJD\">（5）检查返回参数是否正确。</p><p data-pid=\"1beoJfoK\">DOS调用与BIOS调用两者的异同：</p><p data-pid=\"imyynjP_\">DOS功能调用在更高层次上提供了与BIOS类同的功能。</p><p data-pid=\"XjU0NiZl\">DOS调用与BIOS调用两者的区别</p><p data-pid=\"2IsMe-XA\">调用BIOS中断程序比调用DOS的复杂一些，但运行速度快，功能更强；</p><p data-pid=\"HGbfAAea\">DOS功能调用只适用于DOS环境，而BIOS功能调用不受任何操作系统的约束； 某些功能只有BIOS具有。</p><h2>9.2 键盘I/O</h2><h3>9.2.1 字符码与扫描码</h3><p data-pid=\"ft99-10y\">键盘主要由3种基本类型的键组成：</p><p data-pid=\"i6JoB9ww\">字符数字键、扩展功能键、组合使用的控制键</p><p data-pid=\"EaZc-adV\">字符数字键给计算机传送一个ASCII码字符，而扩展功能键产生一个动作，使用组合控制键能改变其他键所产生的字符码。</p><p data-pid=\"f4SmcUpr\">按键的识别采用行列扫描法，即根据对行线和列线的扫描结果来确定闭合键的位置，这个位置值称为按键的扫描码，通过数据线将8位扫描码送往主机。</p><p data-pid=\"GS50p1uF\">当在键盘上“按下”或“放开”一个键时，如果键盘中断是允许的（8259A 21H端口的第一位等于0），就会产生一个类型9的中断，并转入到BIOS的键盘中断处理程序。</p><p data-pid=\"Qx50ytfJ\">该处理程序从8255可编程外围接口芯片的输入端口读取一个字节，这个字节的低7位是按键的扫描码。最高位为0或者为1，分别表示键是“按下”状态还是“放开”状态。按下时，取得的字节称为通码，放开时取得的字节称为断码。如ESC键按下取得的通码为01H（00000001B），放开ESC键时会产生一个断码81H（10000001B）。</p><p data-pid=\"DPsRc6OW\">没有相应ASCII码的键，如Alt和功能键（F1～F10），字符码为0</p><p data-pid=\"Ug4PVfo7\">还有一些非ASCII码键产生一个指定的操作，如PRTSC</p><p data-pid=\"pPR679Zp\">转换成的字符码以及扫描码存储在BIOS数据区的键盘缓冲区KB_BUFFER中</p><p data-pid=\"VVFADRuS\">键盘缓冲区是一个先进先出的循环队列。  </p><p data-pid=\"_H2CrGz8\">虽然缓冲区的本身长度为16个字，但出于判断“队列满”的考虑，它最多只能保存15个键盘信息。</p><p data-pid=\"6qabDYJB\">当Buffer_Head＝Buffer_Tail时，说明缓冲区为空，表示无键盘输入。</p><p data-pid=\"_e8DUjne\">键盘中断：09H vs. 16H?</p><p data-pid=\"GUwZsf1p\">09H：硬件中断；16H：软件中断。</p><p data-pid=\"yipdQLka\">BIOS的INT 09H和INT 16H中断处理程序是一对相互配合的程序，其中09H向键盘缓冲区写入，16H从键盘缓冲区读出。</p><p data-pid=\"JR1YKvMV\">处理时机不同：09H是有键按下的时候产生硬件中断并触发；16H是应用程序调用的时候起作用。</p><h3>9.2.2 BIOS键盘中断</h3><p data-pid=\"4mKXVy5o\">类型 16H 的中断提供了基本的键盘操作，它的中断处理程序包括3个不同的功能，分别根据AH寄存器中的子功能号来确定。</p><p data-pid=\"bSigElaq\">（1）AH=0：从键盘读字符到AX寄存器中。其中AL=字符码，AH=扫描码。</p><p data-pid=\"f4wQBX2D\">（2）AH=1：读键盘缓冲区字符到AX寄存器中，并置ZF标志位。</p><p data-pid=\"Td7Qo6Or\">若ZF=0，则AL=字符码，AH=扫描码</p><p data-pid=\"NZwanl0Q\">若ZF=1，则表示缓冲区空</p><p data-pid=\"_5fUvI7v\">（3）AH=2：读取键盘状态字节。(AL=键盘状态字节）。</p><p data-pid=\"-PEZTlMy\">键盘中的控制键和双态键是非打印按键，它们是起控制或转换作用的。当使用者按下控制键或双态键时，系统要记住其所按下的按键。为此，在计算机系统中，特意安排的一个字节来标志这些按键的状态，我们称该字为键盘状态字节（KB_Flag） 。</p><h3>9.2.3 DOS中断调用</h3><p data-pid=\"QFM1eZSH\">1）单字符输入：</p><p data-pid=\"KpvzrO_C\">INT 21H的1号功能，AL=输入字符</p><p data-pid=\"X1Vza9hu\">如果程序要求能接收功能键或数字组合键必须进行两次DOS功能调用：第一次回送00 第二次回送扫描码</p><p data-pid=\"Ot3UPUWv\">2）输入字符串     INT 21H的10号功能，DS：DX=缓冲区首地址。</p><p data-pid=\"8Ys30ViK\">缓冲区的第一个字节保存最大字符数（逻辑上限是255），由用户设定，若输入的字符数大于此数，PC机会发出“嘟嘟”声，光标不再移动。</p><p data-pid=\"pa3kQAqe\">第二个字节是实际输入字符的个数。这个数据由功能10自动填入。</p><p data-pid=\"ObqLjACJ\">两个字节之后就是用户输入的字符串，以回车键结束（也会占用一个字节）。</p><p data-pid=\"K505aQi7\">因此缓冲区的大小应为：最大字符数（包括回车）+2</p><p data-pid=\"nVCeGJ0z\">3）清除键盘缓冲区</p><p data-pid=\"sJ6Ga9MP\">Int 21的功能0ch能清除键盘缓冲区，然后执行在AL中指定的功能。AL中指定的功能可以是1，6，7，8或0AH。</p><p data-pid=\"8kVJk75f\">4）检验键盘状态</p><p data-pid=\"Df7grbFR\">INT 21H的0B号功能可以检验一个键是否被按动，如果按下一个键，则AL=0FFH，否则AL=0。无论哪种情况都将继续执行下一条语句。</p><h2>9.3 显示器I/O</h2><h3>9.3.1 字符属性</h3><p data-pid=\"wKluJYND\">在常用的文本显示模式下，屏幕被划分成25行，每行可显示80个字符，所以，每屏最多可显示2000(80×25)个字符。</p><p data-pid=\"rTta4W66\">为了便于标识屏幕上的每个显示位置，我们就用其所在行和列来表示之，并规定：屏幕的左上角坐标为(0, 0)，右下角坐标为(24, 79)。</p><p data-pid=\"CBVmA7OE\">对应显示屏幕上的每个字符，在存储器中由连续的两个字节表示，一个字节表示ASCII码，另一个字节保存字符的属性。</p><p data-pid=\"NOMkNTok\">1、单色字符显示：对单色显示，字符的属性确定了该字符的显示方式，如字符是否闪烁、是否高亮度、是否反向显示等。    </p><p data-pid=\"1ypJnfyh\">闪烁位 7</p><p data-pid=\"vIvytIyY\">背景位 6 5 4</p><p data-pid=\"bjtaqXdN\">亮度位 3</p><p data-pid=\"yJYoayMV\">前景位 2 1 0</p><p data-pid=\"RsaFCyLN\">2、彩色字符显示：显示彩色字符时，属性字节可以选择显示字符的前景颜色和背景颜色。</p><p data-pid=\"dB9v8lZb\">前景颜色有16种可以选择，背景颜色有8种可以选择。</p><p data-pid=\"d43ZyMdn\">闪烁和亮度只应用于前景。</p><p data-pid=\"ibt2xvUq\">对于单色显示适配器MDA，显存的起始地址为B000:0000；对于CGA、EGA、VGA是B800:0000。</p><p data-pid=\"6yCKvFKI\">在25 X 80的文本显示方式下，屏幕可有2000个字符位置，因每个字符需要用两个字节，所以每屏显存容量需要4K</p><p data-pid=\"dnDpDk62\">Char_Offset=Page_Offset+(row*width+column)*byte</p><p data-pid=\"l0Z9i5PC\">byte是表示一个字符所用的字节数，这里：byte=2。</p><h3>9.3.2 BIOS显示中断</h3><p data-pid=\"lcl0FVI0\">（1）设置光标类型（1号功能）            入口参数：AH=1（功能号），CH=光标开始行，CL=光标结束行。           出口参数：无。根据CX给出光标的大小。 （2）设置光标位置（2号功能）            入口参数：AH=2（功能号），BH=页号，DH=行号，DL=列号。           出口参数：无。根据DX确定了光标位置。  （3）读当前光标位置（3号功能）          入口参数；AH=3（功能号），BH=页号。           出口参数：DH=行号，DL=列号，CX=光标大小。</p><p data-pid=\"ytdl2UaA\">（4）初始窗口或向上滚动（6号功能）           入口参数：AH=6，AL=上滚行数，CX=上滚窗口左上角的行、列号。DX=上滚窗口右下角的行、列号。BH=空白行的属性。          出口参数：无。当滚动后，底部为空白输入行。 （5）初始窗口或向下滚动（7号功能）           入口参数：AH=7，AL=下滚行数，CX=下滚窗口左上角的行、列号。DX=下滚窗口右下角的行、列号。BH=空白行的属性。           出口参数：无。当滚动后，顶部为空白输入行。 （6）读当前光标位置的字符与属性（8号功能）          入口参数：AH=08H，BH=页号。           出口参数：AL为读出的字符，AH为字符属性。 （7）在当前光标位置写字符和属性（9号功能）           入口参数：AH=9，BH=页号，AL=字符的ASCII码，BL=字符属性，CX=写入字符重复次数。          出口参数：无。</p><h3>9.3.3DOS显示功能调用</h3><p data-pid=\"23B--GKN\">显示字符串 (09H功能) 入口参数： 定义要显示的字符串，字符串尾应为‘\\$’，作为结束显示的标志。 DS : DX = 字符串的首地址 功能号：AH = 09H 类型号：21H 出口参数：无 实现功能：显示字符串，遇‘\\$’停止显示，光标随动。</p><h2>9.4 串行通信口I/O</h2><p data-pid=\"59MGaLk6\">计算机与外设交换信息的过程中：</p><p data-pid=\"ATz1Kv7i\">并行通信：多位数据通过多条数据线同时传送。</p><p data-pid=\"Kbn4indY\">串行通信：多位数据通过同一条数据线按位传送。</p><p data-pid=\"UcI3_r3h\">单  工：只容许数据由一方发、一方收，单向通讯。</p><p data-pid=\"R5Z1BSj8\">半双工：容许双向通讯，但是收发只能分时共用一路通道。</p><p data-pid=\"g1uNJr5f\">全双工：容许数据同时双向收发。</p><p data-pid=\"zIqSdikH\">异步通信</p><p data-pid=\"XW2TiiHL\">一个字符一个字符地传输，每个字符一位一位地传输，传输一个字符时，以起始位开始，然后传输字符本身的各位，接着传输校验位，最后以停止位结束该字符的传输。一次传输的起始位、字符各位、校验位、停止位构成一组完整的信息，称为帧（Frame）。</p><p data-pid=\"lFTnSWgu\">帧与帧之间可有任意个空闲位。</p><p data-pid=\"q7rvAhOn\">起始位之后是数据的最低位。</p><p data-pid=\"gfdduTX3\">同步通信</p><p data-pid=\"wJGJSgJz\">同步通信方式不给每个字符都加起始位和停止位，而把字符顺序的连接起来，组成一个数据块（首尾相连的数据串），把这样一个数据块称为一个信息桢。在数据的开始加上一个同步字符，而在信息的末尾加有一定的差错检验字符。</p><p data-pid=\"mGZ9GqrR\">串行通信中，传输速率是用波特率来表示。所谓波特率是指单位时间内传送二进制数据的位数(简写为bps)。</p><h2>9.5 文件存取I/O</h2><h3>9.5.1 文件存取有关概念</h3><p data-pid=\"vHglig5U\">DOS 系统功能调用 21H 的文件操作方法：文件代号式磁盘存取。</p><p data-pid=\"iCDnHGu7\">用户在处理一个文件时，必须给出完整的路径名，一旦文件的路径名送入操作系统，系统就返回给用户一个16位的二进制控制字，称为文件代号。</p><p data-pid=\"Utmopi8_\">[d:][path]filename.exe, 00</p><h3>9.5.2 文件存取功能调用</h3><p data-pid=\"UllOdmtr\">建立磁盘文件</p><p data-pid=\"dfAtLglj\">建立一个新文件或用同一个文件名重写一个旧文件时，首先要建立文件并赋给它一个属性，如果DOS发现要建立的文件已经存在，那么原来的文件就被破坏。</p><p data-pid=\"qerigzmF\">建立文件（3CH） 功能：按指定文件名建立文件。 入口参数： (AH)＝3CH， DS:DX指向ASCIZ字符串的段地址和偏移地址 (CX)＝文件属性。</p><p data-pid=\"iinUKu0c\">出口参数： 若成功，则CF＝0，(AX)＝文件代号； 若失败，则CF＝1，(AX)＝错误代码。</p><p data-pid=\"0GfatAsZ\">打开文件（3DH）  功能：打开由ASCII  Z串指定的文件。 入口参数：  (AH)＝3DH，DS：DX指向ASCIZ字符串的段地址和偏移地址，(AL)＝存取代码（0：读文件，1：写文件，2：读、写文件）。 出口参数：  若成功，则CF＝0，（AX）＝文件代号； 若失败，则CF＝1，（AX）＝错误代码。</p><p data-pid=\"pcjXbWUV\">关闭文件（3EH） 功能：关闭文件代号指定的文件。 入口参数： (AH)＝3EH，(BX)＝文件代号。 出口参数： 若操作成功，则CF＝0； 若操作失败，则CF＝1，（AX）＝错误代码。 </p><p data-pid=\"BF2ynFW8\">读文件（3FH） 入口参数： (AH)＝3FH，(BX)＝文件代号，(CX)＝要读取的字节数； DS：DX指向接收数据缓冲区的段地址和偏移地址。</p><p data-pid=\"IjfobwKu\">出口参数： 若成功，则CF＝0，(AX)＝实际读入字节数，(AX)＝0，文件结束； 若失败，则CF＝1，(AX)＝错误代码。</p><p data-pid=\"zUki2o73\">写文件（40H） 入口参数： (AH)＝40H，(BX)＝文件代号，(CX)＝要写入的字节数； DS：DX指向存放写入信息数据缓冲区的段地址和偏移地址。</p><p data-pid=\"NKlSTdfL\">出口参数： 若成功，则CF＝0，(AX)＝写入字节数； 若失败，则CF＝1，(AX)＝错误代码。</p><hr/><p data-pid=\"2gDJCyzW\">希望对学习计算机相关课程的同学有所帮助。</p>",
  "content_need_truncated": false,
  "created_time": 1585413044,
  "excerpt": "就以我在上学期的汇编语言课实战牌组为例吧！（原文《 【Anki 牌组+Markdown笔记分享】汇编语言 》）Anki 牌组分享地址： https://ankiweb.net/shared/info/1975809327 预览： [图片] [图片] 我的成绩： [图片] 以下是我用 Markdown 做的笔记： 第一章 基础知识1.1 进位计数制与不同基数的数之间的转换1.1.1 二进制数二进制的基数为 2，即数码的个数为 2 ，只有 0 和 1，并遵循逢二进一的规则。 十进制数 D，二进制数 B，八进制 O，十六进制 H。 1.1.2 …",
  "id": 1111982205,
  "is_jump_native": false,
  "question": {
    "created": 1585287966,
    "detail": "",
    "id": 382925829,
    "question_type": "normal",
    "relationship": {},
    "title": "大学生anki怎么高效使用?",
    "type": "question",
    "updated_time": 1585287966,
    "url": "https://api.zhihu.com/questions/382925829"
  },
  "relationship": {
    "upvoted_followees": []
  },
  "type": "answer",
  "voteup_count": 40
}