{
  "answer_type": "normal",
  "author": {
    "avatar_url": "https://pic1.zhimg.com/v2-0ebbd00d10ee9f3b47237b367659abe0_l.jpg?source=2c26e567",
    "avatar_url_template": "https://picx.zhimg.com/v2-0ebbd00d10ee9f3b47237b367659abe0.jpg?source=2c26e567",
    "badge": [],
    "badge_v2": {
      "detail_badges": [],
      "icon": "",
      "merged_badges": [],
      "night_icon": "",
      "title": ""
    },
    "gender": 1,
    "headline": "钻研人类记忆，探索复习算法。改善教育公平，践行自由学习。",
    "id": "3c9990a12cdbcd92e20b1387b160f0a3",
    "is_advertiser": false,
    "is_org": false,
    "is_privacy": false,
    "name": "叶峻峣",
    "type": "people",
    "url": "https://api.zhihu.com/people/3c9990a12cdbcd92e20b1387b160f0a3",
    "url_token": "thoughts-memo",
    "user_type": "people"
  },
  "biz_ext": {},
  "comment_count": 0,
  "content": "<p data-pid=\"a9ZMijVq\">可以，这是我基于 Rust 的一个深度学习框架 Burn 开发的一个记忆预测算法：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/open-spaced-repetition/fsrs-rs\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">open-spaced-repetition/fsrs-rs: FSRS for Rust, including Optimizer and Scheduler (github.com)</a><p data-pid=\"Y9w4Mo6p\">其算法项目已经超过 1.5k star：</p><figure data-size=\"normal\"><noscript><img src=\"https://picx.zhimg.com/50/v2-eac8d112af0578209ba4cd5a95e4778c_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1594\" data-rawheight=\"1060\" data-original-token=\"v2-eac8d112af0578209ba4cd5a95e4778c\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-f3123a2cc28c5662a4cb352b461eff0c_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1594\" data-original=\"https://picx.zhimg.com/v2-eac8d112af0578209ba4cd5a95e4778c_r.jpg?source=2c26e567\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1594&#39; height=&#39;1060&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1594\" data-rawheight=\"1060\" data-original-token=\"v2-eac8d112af0578209ba4cd5a95e4778c\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-f3123a2cc28c5662a4cb352b461eff0c_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1594\" data-original=\"https://picx.zhimg.com/v2-eac8d112af0578209ba4cd5a95e4778c_r.jpg?source=2c26e567\" data-actualsrc=\"https://picx.zhimg.com/50/v2-eac8d112af0578209ba4cd5a95e4778c_720w.jpg?source=2c26e567\"/></figure><p data-pid=\"LNSU4nc5\">下面这个项目是 AnkiDroid 应用和 Anki 桌面端 Rust 代码的 JNI bridge：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/ankidroid/Anki-Android-Backend\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://picx.zhimg.com/v2-2bd42e32773abe50ede300acb46a0ded_180x120.jpg\" data-image-width=\"1200\" data-image-height=\"600\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - ankidroid/Anki-Android-Backend: JNI bridge between AnkiDroid and Anki Desktop&#39;s rust code</a><p data-pid=\"2FRnNg-P\">通过 JNI，AnkiDroid 就可以调用 Rust 层的代码，并运行深度学习模型了。</p><p data-pid=\"bzikhZbf\">另外，AnkiMobile 是 iOS 端的 Anki，也通过 Rust 层运行 FSRS，不过它是闭源软件，所有这里就没有参考代码了。</p><p data-pid=\"VLjd0Kek\">目前这个项目还在维护中，欢迎参与开源社区！</p><hr/><p data-pid=\"vuWByRmS\">相关回答：</p><a href=\"https://www.zhihu.com/question/512163948/answer/3174376277\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-d13632ee8b2382afeaeff61ea471a691_180x120.jpg\" data-image-width=\"880\" data-image-height=\"499\" class=\"internal\">Github上有哪些Rust写的知名项目？</a><a href=\"https://www.zhihu.com/question/604594191/answer/3171853749\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">哪些 Rust 库让你相见恨晚？</a><a href=\"https://www.zhihu.com/question/622373990/answer/3216037837\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">未来Rust会是AI应用开发的优势语言吗？</a><p></p>",
  "content_need_truncated": false,
  "created_time": 1702622006,
  "excerpt": "可以，这是我基于 Rust 的一个深度学习框架 Burn 开发的一个记忆预测算法： open-spaced-repetition/fsrs-rs: FSRS for Rust, including Optimizer and Scheduler (github.com) 其算法项目已经超过 1.5k star： [图片] 下面这个项目是 AnkiDroid 应用和 Anki 桌面端 Rust 代码的 JNI bridge： GitHub - ankidroid/Anki-Android-Backend: JNI bridge between AnkiDroid and Anki Desktop&#39;s rust code 通过 JNI，AnkiDroid 就可以调用 Rust …",
  "id": 3326670081,
  "is_jump_native": false,
  "link_card_info": {
    "https://www.zhihu.com/question/512163948/answer/3174376277": "{\"card_type\":\"card_1\",\"display\":{\"title\":\"Github上有哪些Rust写的知名项目？\",\"card_open_url\":\"https://www.zhihu.com/question/512163948/answer/3174376277\",\"desc\":\"170 赞同 · 21 评论 \\u003ca class=\\\"tag type_a\\\"\\u003e回答\\u003c/a\\u003e\",\"content\":\"\\u003ca class=\\\"text normal/bold\\\" data-color=\\\"#444444\\\" data-night-color=\\\"#D3D3D3\\\"\\u003eThoughts Memo:\\u003c/a\\u003e Anki（一款开源的间隔重复软件）大概算半个吧： [图片] 语言成分极其复杂（Rust 和 Python 加起来占了四分之三以上）： [图片] 以前的主体是 PyQt，现在已经将大部分底层代码用 Rust 重写了。 拜它所赐，我本来一个臭写 Python 的，现在天天被 Rust 精神注入。 不过还好有 GPT-4，可以帮我写 Rust 代码，而且效果还不错： [图片] [图片] [图片] 一个晚上就写完了从 Anki 的 sqlite 数据库构建 FSRS 数据集的代码： [图片] use chrono::prelude::*; use chrono_tz::Tz; use r…\",\"image\":{\"image_url\":\"https://pic1.zhimg.com/v2-d13632ee8b2382afeaeff61ea471a691.jpg?source=7e7ef6e2\\u0026needBackground=1\",\"ratio\":1,\"is_video\":false},\"bg_type\":\"dark\"},\"source\":{\"content_type\":\"ANSWER\",\"content_id\":\"3174376277\"},\"za_data\":{\"attach_info\":\"\"}}",
    "https://www.zhihu.com/question/604594191/answer/3171853749": "{\"card_type\":\"card_1\",\"display\":{\"title\":\"哪些 Rust 库让你相见恨晚？\",\"card_open_url\":\"https://www.zhihu.com/question/604594191/answer/3171853749\",\"desc\":\"107 赞同 · 17 评论 \\u003ca class=\\\"tag type_a\\\"\\u003e回答\\u003c/a\\u003e\",\"content\":\"\\u003ca class=\\\"text normal/bold\\\" data-color=\\\"#444444\\\" data-night-color=\\\"#D3D3D3\\\"\\u003eThoughts Memo:\\u003c/a\\u003e burn-rs ，一个深度学习框架，未来 FSRS 能不能在手机端跑，就看它了。对我这个算法工程师来说，这个库比较能解决的痛点包括： 不依赖 torch/tensorflow，编译出来体积很小，可以在客户端进行参数训练，纯本地化能自己写 forward，而不是几个网络层搭积木，比较自由，比如下面就是我重写的 FSRS：#[derive(Module, Debug)] pub struct Model\\u003cB: Backend\\u003e { pub w: Param\\u003cTensor\\u003cB, 1\\u003e\\u003e, } impl\\u003cB: Backend\\u003cFloatElem = f32\\u003e\\u003e Mode…\",\"bg_type\":\"dark\"},\"source\":{\"content_type\":\"ANSWER\",\"content_id\":\"3171853749\"},\"za_data\":{\"attach_info\":\"\"}}",
    "https://www.zhihu.com/question/622373990/answer/3216037837": "{\"card_type\":\"card_1\",\"display\":{\"title\":\"未来Rust会是AI应用开发的优势语言吗？\",\"card_open_url\":\"https://www.zhihu.com/question/622373990/answer/3216037837\",\"desc\":\"130 赞同 · 42 评论 \\u003ca class=\\\"tag type_a\\\"\\u003e回答\\u003c/a\\u003e\",\"content\":\"\\u003ca class=\\\"text normal/bold\\\" data-color=\\\"#444444\\\" data-night-color=\\\"#D3D3D3\\\"\\u003eThoughts Memo:\\u003c/a\\u003e 知乎惯例，先问是不是，再问为什么。 。。。Rust 的 AI 库可以把你逼疯。给你表演一下： PyTorch： def stability_after_failure( self, state: Tensor, new_d: Tensor, r: Tensor ) -\\u003e Tensor: new_s = ( self.w[11] * torch.pow(new_d, -self.w[12]) * (torch.pow(state[:, 0] + 1, self.w[13]) - 1) * torch.exp((1 - r) * self.w[14]) ) return new_sCandle（hugging face 的 Rust 深度学习框架）： fn stability_after_fail…\",\"bg_type\":\"dark\"},\"source\":{\"content_type\":\"ANSWER\",\"content_id\":\"3216037837\"},\"za_data\":{\"attach_info\":\"\"}}"
  },
  "question": {
    "created": 1646816406,
    "detail": "",
    "id": 520960106,
    "question_type": "normal",
    "relationship": {},
    "title": "Rust是否可以用来做App开发（ios，安卓端）和深度学习呢？",
    "type": "question",
    "updated_time": 1646816406,
    "url": "https://api.zhihu.com/questions/520960106"
  },
  "relationship": {
    "upvoted_followees": []
  },
  "type": "answer",
  "voteup_count": 16
}